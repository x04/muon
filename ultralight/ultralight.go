// THE AUTOGENERATED LICENSE. ALL THE RIGHTS ARE RESERVED BY ROBOTS.

// WARNING: This file has automatically been generated on Mon, 07 Dec 2020 06:43:44 EST.
// Code generated by https://git.io/c-for-go. DO NOT EDIT.

package ultralight

/*
#cgo CFLAGS: -I../include
#cgo LDFLAGS: -L${SRCDIR}/libs -lUltralightCore -lWebCore -lUltralight -lAppCore
#include "AppCore/CAPI.h"
#include <stdlib.h>
#include "cgo_helpers.h"
*/
import "C"
import (
	"runtime"
	"unsafe"
)

// UlCreateSettings function as declared in AppCore/CAPI.h:52
func UlCreateSettings() ULSettings {
	__ret := C.ulCreateSettings()
	__v := *(*ULSettings)(unsafe.Pointer(&__ret))
	return __v
}

// UlDestroySettings function as declared in AppCore/CAPI.h:57
func UlDestroySettings(settings ULSettings) {
	csettings, csettingsAllocMap := *(*C.ULSettings)(unsafe.Pointer(&settings)), cgoAllocsUnknown
	C.ulDestroySettings(csettings)
	runtime.KeepAlive(csettingsAllocMap)
}

// UlSettingsSetDeveloperName function as declared in AppCore/CAPI.h:67
func UlSettingsSetDeveloperName(settings ULSettings, name ULString) {
	csettings, csettingsAllocMap := *(*C.ULSettings)(unsafe.Pointer(&settings)), cgoAllocsUnknown
	cname, cnameAllocMap := *(*C.ULString)(unsafe.Pointer(&name)), cgoAllocsUnknown
	C.ulSettingsSetDeveloperName(csettings, cname)
	runtime.KeepAlive(cnameAllocMap)
	runtime.KeepAlive(csettingsAllocMap)
}

// UlSettingsSetAppName function as declared in AppCore/CAPI.h:77
func UlSettingsSetAppName(settings ULSettings, name ULString) {
	csettings, csettingsAllocMap := *(*C.ULSettings)(unsafe.Pointer(&settings)), cgoAllocsUnknown
	cname, cnameAllocMap := *(*C.ULString)(unsafe.Pointer(&name)), cgoAllocsUnknown
	C.ulSettingsSetAppName(csettings, cname)
	runtime.KeepAlive(cnameAllocMap)
	runtime.KeepAlive(csettingsAllocMap)
}

// UlSettingsSetFileSystemPath function as declared in AppCore/CAPI.h:92
func UlSettingsSetFileSystemPath(settings ULSettings, path ULString) {
	csettings, csettingsAllocMap := *(*C.ULSettings)(unsafe.Pointer(&settings)), cgoAllocsUnknown
	cpath, cpathAllocMap := *(*C.ULString)(unsafe.Pointer(&path)), cgoAllocsUnknown
	C.ulSettingsSetFileSystemPath(csettings, cpath)
	runtime.KeepAlive(cpathAllocMap)
	runtime.KeepAlive(csettingsAllocMap)
}

// UlSettingsSetLoadShadersFromFileSystem function as declared in AppCore/CAPI.h:101
func UlSettingsSetLoadShadersFromFileSystem(settings ULSettings, enabled bool) {
	csettings, csettingsAllocMap := *(*C.ULSettings)(unsafe.Pointer(&settings)), cgoAllocsUnknown
	cenabled, cenabledAllocMap := (C._Bool)(enabled), cgoAllocsUnknown
	C.ulSettingsSetLoadShadersFromFileSystem(csettings, cenabled)
	runtime.KeepAlive(cenabledAllocMap)
	runtime.KeepAlive(csettingsAllocMap)
}

// UlSettingsSetForceCPURenderer function as declared in AppCore/CAPI.h:109
func UlSettingsSetForceCPURenderer(settings ULSettings, force_cpu bool) {
	csettings, csettingsAllocMap := *(*C.ULSettings)(unsafe.Pointer(&settings)), cgoAllocsUnknown
	cforce_cpu, cforce_cpuAllocMap := (C._Bool)(force_cpu), cgoAllocsUnknown
	C.ulSettingsSetForceCPURenderer(csettings, cforce_cpu)
	runtime.KeepAlive(cforce_cpuAllocMap)
	runtime.KeepAlive(csettingsAllocMap)
}

// UlCreateApp function as declared in AppCore/CAPI.h:125
func UlCreateApp(settings ULSettings, config ULConfig) ULApp {
	csettings, csettingsAllocMap := *(*C.ULSettings)(unsafe.Pointer(&settings)), cgoAllocsUnknown
	cconfig, cconfigAllocMap := *(*C.ULConfig)(unsafe.Pointer(&config)), cgoAllocsUnknown
	__ret := C.ulCreateApp(csettings, cconfig)
	runtime.KeepAlive(cconfigAllocMap)
	runtime.KeepAlive(csettingsAllocMap)
	__v := *(*ULApp)(unsafe.Pointer(&__ret))
	return __v
}

// UlDestroyApp function as declared in AppCore/CAPI.h:130
func UlDestroyApp(app ULApp) {
	capp, cappAllocMap := *(*C.ULApp)(unsafe.Pointer(&app)), cgoAllocsUnknown
	C.ulDestroyApp(capp)
	runtime.KeepAlive(cappAllocMap)
}

// UlAppSetWindow function as declared in AppCore/CAPI.h:140
func UlAppSetWindow(app ULApp, window ULWindow) {
	capp, cappAllocMap := *(*C.ULApp)(unsafe.Pointer(&app)), cgoAllocsUnknown
	cwindow, cwindowAllocMap := *(*C.ULWindow)(unsafe.Pointer(&window)), cgoAllocsUnknown
	C.ulAppSetWindow(capp, cwindow)
	runtime.KeepAlive(cwindowAllocMap)
	runtime.KeepAlive(cappAllocMap)
}

// UlAppGetWindow function as declared in AppCore/CAPI.h:145
func UlAppGetWindow(app ULApp) ULWindow {
	capp, cappAllocMap := *(*C.ULApp)(unsafe.Pointer(&app)), cgoAllocsUnknown
	__ret := C.ulAppGetWindow(capp)
	runtime.KeepAlive(cappAllocMap)
	__v := *(*ULWindow)(unsafe.Pointer(&__ret))
	return __v
}

// UlAppSetUpdateCallback function as declared in AppCore/CAPI.h:157
func UlAppSetUpdateCallback(app ULApp, callback ULUpdateCallback, user_data unsafe.Pointer) {
	capp, cappAllocMap := *(*C.ULApp)(unsafe.Pointer(&app)), cgoAllocsUnknown
	ccallback, ccallbackAllocMap := callback.PassValue()
	cuser_data, cuser_dataAllocMap := user_data, cgoAllocsUnknown
	C.ulAppSetUpdateCallback(capp, ccallback, cuser_data)
	runtime.KeepAlive(cuser_dataAllocMap)
	runtime.KeepAlive(ccallbackAllocMap)
	runtime.KeepAlive(cappAllocMap)
}

// UlAppIsRunning function as declared in AppCore/CAPI.h:163
func UlAppIsRunning(app ULApp) bool {
	capp, cappAllocMap := *(*C.ULApp)(unsafe.Pointer(&app)), cgoAllocsUnknown
	__ret := C.ulAppIsRunning(capp)
	runtime.KeepAlive(cappAllocMap)
	__v := (bool)(__ret)
	return __v
}

// UlAppGetMainMonitor function as declared in AppCore/CAPI.h:170
func UlAppGetMainMonitor(app ULApp) ULMonitor {
	capp, cappAllocMap := *(*C.ULApp)(unsafe.Pointer(&app)), cgoAllocsUnknown
	__ret := C.ulAppGetMainMonitor(capp)
	runtime.KeepAlive(cappAllocMap)
	__v := *(*ULMonitor)(unsafe.Pointer(&__ret))
	return __v
}

// UlAppGetRenderer function as declared in AppCore/CAPI.h:175
func UlAppGetRenderer(app ULApp) ULRenderer {
	capp, cappAllocMap := *(*C.ULApp)(unsafe.Pointer(&app)), cgoAllocsUnknown
	__ret := C.ulAppGetRenderer(capp)
	runtime.KeepAlive(cappAllocMap)
	__v := *(*ULRenderer)(unsafe.Pointer(&__ret))
	return __v
}

// UlAppRun function as declared in AppCore/CAPI.h:180
func UlAppRun(app ULApp) {
	capp, cappAllocMap := *(*C.ULApp)(unsafe.Pointer(&app)), cgoAllocsUnknown
	C.ulAppRun(capp)
	runtime.KeepAlive(cappAllocMap)
}

// UlAppQuit function as declared in AppCore/CAPI.h:185
func UlAppQuit(app ULApp) {
	capp, cappAllocMap := *(*C.ULApp)(unsafe.Pointer(&app)), cgoAllocsUnknown
	C.ulAppQuit(capp)
	runtime.KeepAlive(cappAllocMap)
}

// UlMonitorGetScale function as declared in AppCore/CAPI.h:190
func UlMonitorGetScale(monitor ULMonitor) float64 {
	cmonitor, cmonitorAllocMap := *(*C.ULMonitor)(unsafe.Pointer(&monitor)), cgoAllocsUnknown
	__ret := C.ulMonitorGetScale(cmonitor)
	runtime.KeepAlive(cmonitorAllocMap)
	__v := (float64)(__ret)
	return __v
}

// UlMonitorGetWidth function as declared in AppCore/CAPI.h:195
func UlMonitorGetWidth(monitor ULMonitor) uint32 {
	cmonitor, cmonitorAllocMap := *(*C.ULMonitor)(unsafe.Pointer(&monitor)), cgoAllocsUnknown
	__ret := C.ulMonitorGetWidth(cmonitor)
	runtime.KeepAlive(cmonitorAllocMap)
	__v := (uint32)(__ret)
	return __v
}

// UlMonitorGetHeight function as declared in AppCore/CAPI.h:200
func UlMonitorGetHeight(monitor ULMonitor) uint32 {
	cmonitor, cmonitorAllocMap := *(*C.ULMonitor)(unsafe.Pointer(&monitor)), cgoAllocsUnknown
	__ret := C.ulMonitorGetHeight(cmonitor)
	runtime.KeepAlive(cmonitorAllocMap)
	__v := (uint32)(__ret)
	return __v
}

// UlCreateWindow function as declared in AppCore/CAPI.h:215
func UlCreateWindow(monitor ULMonitor, width uint32, height uint32, fullscreen bool, window_flags uint32) ULWindow {
	cmonitor, cmonitorAllocMap := *(*C.ULMonitor)(unsafe.Pointer(&monitor)), cgoAllocsUnknown
	cwidth, cwidthAllocMap := (C.uint)(width), cgoAllocsUnknown
	cheight, cheightAllocMap := (C.uint)(height), cgoAllocsUnknown
	cfullscreen, cfullscreenAllocMap := (C._Bool)(fullscreen), cgoAllocsUnknown
	cwindow_flags, cwindow_flagsAllocMap := (C.uint)(window_flags), cgoAllocsUnknown
	__ret := C.ulCreateWindow(cmonitor, cwidth, cheight, cfullscreen, cwindow_flags)
	runtime.KeepAlive(cwindow_flagsAllocMap)
	runtime.KeepAlive(cfullscreenAllocMap)
	runtime.KeepAlive(cheightAllocMap)
	runtime.KeepAlive(cwidthAllocMap)
	runtime.KeepAlive(cmonitorAllocMap)
	__v := *(*ULWindow)(unsafe.Pointer(&__ret))
	return __v
}

// UlDestroyWindow function as declared in AppCore/CAPI.h:222
func UlDestroyWindow(window ULWindow) {
	cwindow, cwindowAllocMap := *(*C.ULWindow)(unsafe.Pointer(&window)), cgoAllocsUnknown
	C.ulDestroyWindow(cwindow)
	runtime.KeepAlive(cwindowAllocMap)
}

// UlWindowSetCloseCallback function as declared in AppCore/CAPI.h:230
func UlWindowSetCloseCallback(window ULWindow, callback ULCloseCallback, user_data unsafe.Pointer) {
	cwindow, cwindowAllocMap := *(*C.ULWindow)(unsafe.Pointer(&window)), cgoAllocsUnknown
	ccallback, ccallbackAllocMap := callback.PassValue()
	cuser_data, cuser_dataAllocMap := user_data, cgoAllocsUnknown
	C.ulWindowSetCloseCallback(cwindow, ccallback, cuser_data)
	runtime.KeepAlive(cuser_dataAllocMap)
	runtime.KeepAlive(ccallbackAllocMap)
	runtime.KeepAlive(cwindowAllocMap)
}

// UlWindowSetResizeCallback function as declared in AppCore/CAPI.h:241
func UlWindowSetResizeCallback(window ULWindow, callback ULResizeCallback, user_data unsafe.Pointer) {
	cwindow, cwindowAllocMap := *(*C.ULWindow)(unsafe.Pointer(&window)), cgoAllocsUnknown
	ccallback, ccallbackAllocMap := callback.PassValue()
	cuser_data, cuser_dataAllocMap := user_data, cgoAllocsUnknown
	C.ulWindowSetResizeCallback(cwindow, ccallback, cuser_data)
	runtime.KeepAlive(cuser_dataAllocMap)
	runtime.KeepAlive(ccallbackAllocMap)
	runtime.KeepAlive(cwindowAllocMap)
}

// UlWindowGetWidth function as declared in AppCore/CAPI.h:248
func UlWindowGetWidth(window ULWindow) uint32 {
	cwindow, cwindowAllocMap := *(*C.ULWindow)(unsafe.Pointer(&window)), cgoAllocsUnknown
	__ret := C.ulWindowGetWidth(cwindow)
	runtime.KeepAlive(cwindowAllocMap)
	__v := (uint32)(__ret)
	return __v
}

// UlWindowGetHeight function as declared in AppCore/CAPI.h:253
func UlWindowGetHeight(window ULWindow) uint32 {
	cwindow, cwindowAllocMap := *(*C.ULWindow)(unsafe.Pointer(&window)), cgoAllocsUnknown
	__ret := C.ulWindowGetHeight(cwindow)
	runtime.KeepAlive(cwindowAllocMap)
	__v := (uint32)(__ret)
	return __v
}

// UlWindowIsFullscreen function as declared in AppCore/CAPI.h:258
func UlWindowIsFullscreen(window ULWindow) bool {
	cwindow, cwindowAllocMap := *(*C.ULWindow)(unsafe.Pointer(&window)), cgoAllocsUnknown
	__ret := C.ulWindowIsFullscreen(cwindow)
	runtime.KeepAlive(cwindowAllocMap)
	__v := (bool)(__ret)
	return __v
}

// UlWindowGetScale function as declared in AppCore/CAPI.h:263
func UlWindowGetScale(window ULWindow) float64 {
	cwindow, cwindowAllocMap := *(*C.ULWindow)(unsafe.Pointer(&window)), cgoAllocsUnknown
	__ret := C.ulWindowGetScale(cwindow)
	runtime.KeepAlive(cwindowAllocMap)
	__v := (float64)(__ret)
	return __v
}

// UlWindowSetTitle function as declared in AppCore/CAPI.h:268
func UlWindowSetTitle(window ULWindow, title string) {
	cwindow, cwindowAllocMap := *(*C.ULWindow)(unsafe.Pointer(&window)), cgoAllocsUnknown
	title = safeString(title)
	ctitle, ctitleAllocMap := unpackPCharString(title)
	C.ulWindowSetTitle(cwindow, ctitle)
	runtime.KeepAlive(title)
	runtime.KeepAlive(ctitleAllocMap)
	runtime.KeepAlive(cwindowAllocMap)
}

// UlWindowSetCursor function as declared in AppCore/CAPI.h:273
func UlWindowSetCursor(window ULWindow, cursor ULCursor) {
	cwindow, cwindowAllocMap := *(*C.ULWindow)(unsafe.Pointer(&window)), cgoAllocsUnknown
	ccursor, ccursorAllocMap := (C.ULCursor)(cursor), cgoAllocsUnknown
	C.ulWindowSetCursor(cwindow, ccursor)
	runtime.KeepAlive(ccursorAllocMap)
	runtime.KeepAlive(cwindowAllocMap)
}

// UlWindowClose function as declared in AppCore/CAPI.h:278
func UlWindowClose(window ULWindow) {
	cwindow, cwindowAllocMap := *(*C.ULWindow)(unsafe.Pointer(&window)), cgoAllocsUnknown
	C.ulWindowClose(cwindow)
	runtime.KeepAlive(cwindowAllocMap)
}

// UlWindowDeviceToPixel function as declared in AppCore/CAPI.h:283
func UlWindowDeviceToPixel(window ULWindow, val int32) int32 {
	cwindow, cwindowAllocMap := *(*C.ULWindow)(unsafe.Pointer(&window)), cgoAllocsUnknown
	cval, cvalAllocMap := (C.int)(val), cgoAllocsUnknown
	__ret := C.ulWindowDeviceToPixel(cwindow, cval)
	runtime.KeepAlive(cvalAllocMap)
	runtime.KeepAlive(cwindowAllocMap)
	__v := (int32)(__ret)
	return __v
}

// UlWindowPixelsToDevice function as declared in AppCore/CAPI.h:288
func UlWindowPixelsToDevice(window ULWindow, val int32) int32 {
	cwindow, cwindowAllocMap := *(*C.ULWindow)(unsafe.Pointer(&window)), cgoAllocsUnknown
	cval, cvalAllocMap := (C.int)(val), cgoAllocsUnknown
	__ret := C.ulWindowPixelsToDevice(cwindow, cval)
	runtime.KeepAlive(cvalAllocMap)
	runtime.KeepAlive(cwindowAllocMap)
	__v := (int32)(__ret)
	return __v
}

// UlWindowGetNativeHandle function as declared in AppCore/CAPI.h:297
func UlWindowGetNativeHandle(window ULWindow) unsafe.Pointer {
	cwindow, cwindowAllocMap := *(*C.ULWindow)(unsafe.Pointer(&window)), cgoAllocsUnknown
	__ret := C.ulWindowGetNativeHandle(cwindow)
	runtime.KeepAlive(cwindowAllocMap)
	__v := *(*unsafe.Pointer)(unsafe.Pointer(&__ret))
	return __v
}

// UlCreateOverlay function as declared in AppCore/CAPI.h:318
func UlCreateOverlay(window ULWindow, width uint32, height uint32, x int32, y int32) ULOverlay {
	cwindow, cwindowAllocMap := *(*C.ULWindow)(unsafe.Pointer(&window)), cgoAllocsUnknown
	cwidth, cwidthAllocMap := (C.uint)(width), cgoAllocsUnknown
	cheight, cheightAllocMap := (C.uint)(height), cgoAllocsUnknown
	cx, cxAllocMap := (C.int)(x), cgoAllocsUnknown
	cy, cyAllocMap := (C.int)(y), cgoAllocsUnknown
	__ret := C.ulCreateOverlay(cwindow, cwidth, cheight, cx, cy)
	runtime.KeepAlive(cyAllocMap)
	runtime.KeepAlive(cxAllocMap)
	runtime.KeepAlive(cheightAllocMap)
	runtime.KeepAlive(cwidthAllocMap)
	runtime.KeepAlive(cwindowAllocMap)
	__v := *(*ULOverlay)(unsafe.Pointer(&__ret))
	return __v
}

// UlCreateOverlayWithView function as declared in AppCore/CAPI.h:338
func UlCreateOverlayWithView(window ULWindow, view ULView, x int32, y int32) ULOverlay {
	cwindow, cwindowAllocMap := *(*C.ULWindow)(unsafe.Pointer(&window)), cgoAllocsUnknown
	cview, cviewAllocMap := *(*C.ULView)(unsafe.Pointer(&view)), cgoAllocsUnknown
	cx, cxAllocMap := (C.int)(x), cgoAllocsUnknown
	cy, cyAllocMap := (C.int)(y), cgoAllocsUnknown
	__ret := C.ulCreateOverlayWithView(cwindow, cview, cx, cy)
	runtime.KeepAlive(cyAllocMap)
	runtime.KeepAlive(cxAllocMap)
	runtime.KeepAlive(cviewAllocMap)
	runtime.KeepAlive(cwindowAllocMap)
	__v := *(*ULOverlay)(unsafe.Pointer(&__ret))
	return __v
}

// UlDestroyOverlay function as declared in AppCore/CAPI.h:344
func UlDestroyOverlay(overlay ULOverlay) {
	coverlay, coverlayAllocMap := *(*C.ULOverlay)(unsafe.Pointer(&overlay)), cgoAllocsUnknown
	C.ulDestroyOverlay(coverlay)
	runtime.KeepAlive(coverlayAllocMap)
}

// UlOverlayGetView function as declared in AppCore/CAPI.h:349
func UlOverlayGetView(overlay ULOverlay) ULView {
	coverlay, coverlayAllocMap := *(*C.ULOverlay)(unsafe.Pointer(&overlay)), cgoAllocsUnknown
	__ret := C.ulOverlayGetView(coverlay)
	runtime.KeepAlive(coverlayAllocMap)
	__v := *(*ULView)(unsafe.Pointer(&__ret))
	return __v
}

// UlOverlayGetWidth function as declared in AppCore/CAPI.h:354
func UlOverlayGetWidth(overlay ULOverlay) uint32 {
	coverlay, coverlayAllocMap := *(*C.ULOverlay)(unsafe.Pointer(&overlay)), cgoAllocsUnknown
	__ret := C.ulOverlayGetWidth(coverlay)
	runtime.KeepAlive(coverlayAllocMap)
	__v := (uint32)(__ret)
	return __v
}

// UlOverlayGetHeight function as declared in AppCore/CAPI.h:359
func UlOverlayGetHeight(overlay ULOverlay) uint32 {
	coverlay, coverlayAllocMap := *(*C.ULOverlay)(unsafe.Pointer(&overlay)), cgoAllocsUnknown
	__ret := C.ulOverlayGetHeight(coverlay)
	runtime.KeepAlive(coverlayAllocMap)
	__v := (uint32)(__ret)
	return __v
}

// UlOverlayGetX function as declared in AppCore/CAPI.h:364
func UlOverlayGetX(overlay ULOverlay) int32 {
	coverlay, coverlayAllocMap := *(*C.ULOverlay)(unsafe.Pointer(&overlay)), cgoAllocsUnknown
	__ret := C.ulOverlayGetX(coverlay)
	runtime.KeepAlive(coverlayAllocMap)
	__v := (int32)(__ret)
	return __v
}

// UlOverlayGetY function as declared in AppCore/CAPI.h:369
func UlOverlayGetY(overlay ULOverlay) int32 {
	coverlay, coverlayAllocMap := *(*C.ULOverlay)(unsafe.Pointer(&overlay)), cgoAllocsUnknown
	__ret := C.ulOverlayGetY(coverlay)
	runtime.KeepAlive(coverlayAllocMap)
	__v := (int32)(__ret)
	return __v
}

// UlOverlayMoveTo function as declared in AppCore/CAPI.h:374
func UlOverlayMoveTo(overlay ULOverlay, x int32, y int32) {
	coverlay, coverlayAllocMap := *(*C.ULOverlay)(unsafe.Pointer(&overlay)), cgoAllocsUnknown
	cx, cxAllocMap := (C.int)(x), cgoAllocsUnknown
	cy, cyAllocMap := (C.int)(y), cgoAllocsUnknown
	C.ulOverlayMoveTo(coverlay, cx, cy)
	runtime.KeepAlive(cyAllocMap)
	runtime.KeepAlive(cxAllocMap)
	runtime.KeepAlive(coverlayAllocMap)
}

// UlOverlayResize function as declared in AppCore/CAPI.h:380
func UlOverlayResize(overlay ULOverlay, width uint32, height uint32) {
	coverlay, coverlayAllocMap := *(*C.ULOverlay)(unsafe.Pointer(&overlay)), cgoAllocsUnknown
	cwidth, cwidthAllocMap := (C.uint)(width), cgoAllocsUnknown
	cheight, cheightAllocMap := (C.uint)(height), cgoAllocsUnknown
	C.ulOverlayResize(coverlay, cwidth, cheight)
	runtime.KeepAlive(cheightAllocMap)
	runtime.KeepAlive(cwidthAllocMap)
	runtime.KeepAlive(coverlayAllocMap)
}

// UlOverlayIsHidden function as declared in AppCore/CAPI.h:386
func UlOverlayIsHidden(overlay ULOverlay) bool {
	coverlay, coverlayAllocMap := *(*C.ULOverlay)(unsafe.Pointer(&overlay)), cgoAllocsUnknown
	__ret := C.ulOverlayIsHidden(coverlay)
	runtime.KeepAlive(coverlayAllocMap)
	__v := (bool)(__ret)
	return __v
}

// UlOverlayHide function as declared in AppCore/CAPI.h:391
func UlOverlayHide(overlay ULOverlay) {
	coverlay, coverlayAllocMap := *(*C.ULOverlay)(unsafe.Pointer(&overlay)), cgoAllocsUnknown
	C.ulOverlayHide(coverlay)
	runtime.KeepAlive(coverlayAllocMap)
}

// UlOverlayShow function as declared in AppCore/CAPI.h:396
func UlOverlayShow(overlay ULOverlay) {
	coverlay, coverlayAllocMap := *(*C.ULOverlay)(unsafe.Pointer(&overlay)), cgoAllocsUnknown
	C.ulOverlayShow(coverlay)
	runtime.KeepAlive(coverlayAllocMap)
}

// UlOverlayHasFocus function as declared in AppCore/CAPI.h:401
func UlOverlayHasFocus(overlay ULOverlay) bool {
	coverlay, coverlayAllocMap := *(*C.ULOverlay)(unsafe.Pointer(&overlay)), cgoAllocsUnknown
	__ret := C.ulOverlayHasFocus(coverlay)
	runtime.KeepAlive(coverlayAllocMap)
	__v := (bool)(__ret)
	return __v
}

// UlOverlayFocus function as declared in AppCore/CAPI.h:406
func UlOverlayFocus(overlay ULOverlay) {
	coverlay, coverlayAllocMap := *(*C.ULOverlay)(unsafe.Pointer(&overlay)), cgoAllocsUnknown
	C.ulOverlayFocus(coverlay)
	runtime.KeepAlive(coverlayAllocMap)
}

// UlOverlayUnfocus function as declared in AppCore/CAPI.h:411
func UlOverlayUnfocus(overlay ULOverlay) {
	coverlay, coverlayAllocMap := *(*C.ULOverlay)(unsafe.Pointer(&overlay)), cgoAllocsUnknown
	C.ulOverlayUnfocus(coverlay)
	runtime.KeepAlive(coverlayAllocMap)
}

// UlEnablePlatformFontLoader function as declared in AppCore/CAPI.h:422
func UlEnablePlatformFontLoader() {
	C.ulEnablePlatformFontLoader()
}

// UlEnablePlatformFileSystem function as declared in AppCore/CAPI.h:432
func UlEnablePlatformFileSystem(base_dir ULString) {
	cbase_dir, cbase_dirAllocMap := *(*C.ULString)(unsafe.Pointer(&base_dir)), cgoAllocsUnknown
	C.ulEnablePlatformFileSystem(cbase_dir)
	runtime.KeepAlive(cbase_dirAllocMap)
}

// UlEnableDefaultLogger function as declared in AppCore/CAPI.h:442
func UlEnableDefaultLogger(log_path ULString) {
	clog_path, clog_pathAllocMap := *(*C.ULString)(unsafe.Pointer(&log_path)), cgoAllocsUnknown
	C.ulEnableDefaultLogger(clog_path)
	runtime.KeepAlive(clog_pathAllocMap)
}

// UlVersionString function as declared in Ultralight/CAPI.h:268
func UlVersionString() string {
	__ret := C.ulVersionString()
	__v := packPCharString(__ret)
	return __v
}

// UlVersionMajor function as declared in Ultralight/CAPI.h:273
func UlVersionMajor() uint32 {
	__ret := C.ulVersionMajor()
	__v := (uint32)(__ret)
	return __v
}

// UlVersionMinor function as declared in Ultralight/CAPI.h:278
func UlVersionMinor() uint32 {
	__ret := C.ulVersionMinor()
	__v := (uint32)(__ret)
	return __v
}

// UlVersionPatch function as declared in Ultralight/CAPI.h:283
func UlVersionPatch() uint32 {
	__ret := C.ulVersionPatch()
	__v := (uint32)(__ret)
	return __v
}

// UlCreateConfig function as declared in Ultralight/CAPI.h:292
func UlCreateConfig() ULConfig {
	__ret := C.ulCreateConfig()
	__v := *(*ULConfig)(unsafe.Pointer(&__ret))
	return __v
}

// UlDestroyConfig function as declared in Ultralight/CAPI.h:297
func UlDestroyConfig(config ULConfig) {
	cconfig, cconfigAllocMap := *(*C.ULConfig)(unsafe.Pointer(&config)), cgoAllocsUnknown
	C.ulDestroyConfig(cconfig)
	runtime.KeepAlive(cconfigAllocMap)
}

// UlConfigSetResourcePath function as declared in Ultralight/CAPI.h:303
func UlConfigSetResourcePath(config ULConfig, resource_path ULString) {
	cconfig, cconfigAllocMap := *(*C.ULConfig)(unsafe.Pointer(&config)), cgoAllocsUnknown
	cresource_path, cresource_pathAllocMap := *(*C.ULString)(unsafe.Pointer(&resource_path)), cgoAllocsUnknown
	C.ulConfigSetResourcePath(cconfig, cresource_path)
	runtime.KeepAlive(cresource_pathAllocMap)
	runtime.KeepAlive(cconfigAllocMap)
}

// UlConfigSetCachePath function as declared in Ultralight/CAPI.h:309
func UlConfigSetCachePath(config ULConfig, cache_path ULString) {
	cconfig, cconfigAllocMap := *(*C.ULConfig)(unsafe.Pointer(&config)), cgoAllocsUnknown
	ccache_path, ccache_pathAllocMap := *(*C.ULString)(unsafe.Pointer(&cache_path)), cgoAllocsUnknown
	C.ulConfigSetCachePath(cconfig, ccache_path)
	runtime.KeepAlive(ccache_pathAllocMap)
	runtime.KeepAlive(cconfigAllocMap)
}

// UlConfigSetUseGPURenderer function as declared in Ultralight/CAPI.h:320
func UlConfigSetUseGPURenderer(config ULConfig, use_gpu bool) {
	cconfig, cconfigAllocMap := *(*C.ULConfig)(unsafe.Pointer(&config)), cgoAllocsUnknown
	cuse_gpu, cuse_gpuAllocMap := (C._Bool)(use_gpu), cgoAllocsUnknown
	C.ulConfigSetUseGPURenderer(cconfig, cuse_gpu)
	runtime.KeepAlive(cuse_gpuAllocMap)
	runtime.KeepAlive(cconfigAllocMap)
}

// UlConfigSetDeviceScale function as declared in Ultralight/CAPI.h:327
func UlConfigSetDeviceScale(config ULConfig, value float64) {
	cconfig, cconfigAllocMap := *(*C.ULConfig)(unsafe.Pointer(&config)), cgoAllocsUnknown
	cvalue, cvalueAllocMap := (C.double)(value), cgoAllocsUnknown
	C.ulConfigSetDeviceScale(cconfig, cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	runtime.KeepAlive(cconfigAllocMap)
}

// UlConfigSetFaceWinding function as declared in Ultralight/CAPI.h:334
func UlConfigSetFaceWinding(config ULConfig, winding ULFaceWinding) {
	cconfig, cconfigAllocMap := *(*C.ULConfig)(unsafe.Pointer(&config)), cgoAllocsUnknown
	cwinding, cwindingAllocMap := (C.ULFaceWinding)(winding), cgoAllocsUnknown
	C.ulConfigSetFaceWinding(cconfig, cwinding)
	runtime.KeepAlive(cwindingAllocMap)
	runtime.KeepAlive(cconfigAllocMap)
}

// UlConfigSetEnableImages function as declared in Ultralight/CAPI.h:339
func UlConfigSetEnableImages(config ULConfig, enabled bool) {
	cconfig, cconfigAllocMap := *(*C.ULConfig)(unsafe.Pointer(&config)), cgoAllocsUnknown
	cenabled, cenabledAllocMap := (C._Bool)(enabled), cgoAllocsUnknown
	C.ulConfigSetEnableImages(cconfig, cenabled)
	runtime.KeepAlive(cenabledAllocMap)
	runtime.KeepAlive(cconfigAllocMap)
}

// UlConfigSetEnableJavaScript function as declared in Ultralight/CAPI.h:344
func UlConfigSetEnableJavaScript(config ULConfig, enabled bool) {
	cconfig, cconfigAllocMap := *(*C.ULConfig)(unsafe.Pointer(&config)), cgoAllocsUnknown
	cenabled, cenabledAllocMap := (C._Bool)(enabled), cgoAllocsUnknown
	C.ulConfigSetEnableJavaScript(cconfig, cenabled)
	runtime.KeepAlive(cenabledAllocMap)
	runtime.KeepAlive(cconfigAllocMap)
}

// UlConfigSetFontHinting function as declared in Ultralight/CAPI.h:350
func UlConfigSetFontHinting(config ULConfig, font_hinting ULFontHinting) {
	cconfig, cconfigAllocMap := *(*C.ULConfig)(unsafe.Pointer(&config)), cgoAllocsUnknown
	cfont_hinting, cfont_hintingAllocMap := (C.ULFontHinting)(font_hinting), cgoAllocsUnknown
	C.ulConfigSetFontHinting(cconfig, cfont_hinting)
	runtime.KeepAlive(cfont_hintingAllocMap)
	runtime.KeepAlive(cconfigAllocMap)
}

// UlConfigSetFontGamma function as declared in Ultralight/CAPI.h:357
func UlConfigSetFontGamma(config ULConfig, font_gamma float64) {
	cconfig, cconfigAllocMap := *(*C.ULConfig)(unsafe.Pointer(&config)), cgoAllocsUnknown
	cfont_gamma, cfont_gammaAllocMap := (C.double)(font_gamma), cgoAllocsUnknown
	C.ulConfigSetFontGamma(cconfig, cfont_gamma)
	runtime.KeepAlive(cfont_gammaAllocMap)
	runtime.KeepAlive(cconfigAllocMap)
}

// UlConfigSetFontFamilyStandard function as declared in Ultralight/CAPI.h:362
func UlConfigSetFontFamilyStandard(config ULConfig, font_name ULString) {
	cconfig, cconfigAllocMap := *(*C.ULConfig)(unsafe.Pointer(&config)), cgoAllocsUnknown
	cfont_name, cfont_nameAllocMap := *(*C.ULString)(unsafe.Pointer(&font_name)), cgoAllocsUnknown
	C.ulConfigSetFontFamilyStandard(cconfig, cfont_name)
	runtime.KeepAlive(cfont_nameAllocMap)
	runtime.KeepAlive(cconfigAllocMap)
}

// UlConfigSetFontFamilyFixed function as declared in Ultralight/CAPI.h:369
func UlConfigSetFontFamilyFixed(config ULConfig, font_name ULString) {
	cconfig, cconfigAllocMap := *(*C.ULConfig)(unsafe.Pointer(&config)), cgoAllocsUnknown
	cfont_name, cfont_nameAllocMap := *(*C.ULString)(unsafe.Pointer(&font_name)), cgoAllocsUnknown
	C.ulConfigSetFontFamilyFixed(cconfig, cfont_name)
	runtime.KeepAlive(cfont_nameAllocMap)
	runtime.KeepAlive(cconfigAllocMap)
}

// UlConfigSetFontFamilySerif function as declared in Ultralight/CAPI.h:374
func UlConfigSetFontFamilySerif(config ULConfig, font_name ULString) {
	cconfig, cconfigAllocMap := *(*C.ULConfig)(unsafe.Pointer(&config)), cgoAllocsUnknown
	cfont_name, cfont_nameAllocMap := *(*C.ULString)(unsafe.Pointer(&font_name)), cgoAllocsUnknown
	C.ulConfigSetFontFamilySerif(cconfig, cfont_name)
	runtime.KeepAlive(cfont_nameAllocMap)
	runtime.KeepAlive(cconfigAllocMap)
}

// UlConfigSetFontFamilySansSerif function as declared in Ultralight/CAPI.h:379
func UlConfigSetFontFamilySansSerif(config ULConfig, font_name ULString) {
	cconfig, cconfigAllocMap := *(*C.ULConfig)(unsafe.Pointer(&config)), cgoAllocsUnknown
	cfont_name, cfont_nameAllocMap := *(*C.ULString)(unsafe.Pointer(&font_name)), cgoAllocsUnknown
	C.ulConfigSetFontFamilySansSerif(cconfig, cfont_name)
	runtime.KeepAlive(cfont_nameAllocMap)
	runtime.KeepAlive(cconfigAllocMap)
}

// UlConfigSetUserAgent function as declared in Ultralight/CAPI.h:385
func UlConfigSetUserAgent(config ULConfig, agent_string ULString) {
	cconfig, cconfigAllocMap := *(*C.ULConfig)(unsafe.Pointer(&config)), cgoAllocsUnknown
	cagent_string, cagent_stringAllocMap := *(*C.ULString)(unsafe.Pointer(&agent_string)), cgoAllocsUnknown
	C.ulConfigSetUserAgent(cconfig, cagent_string)
	runtime.KeepAlive(cagent_stringAllocMap)
	runtime.KeepAlive(cconfigAllocMap)
}

// UlConfigSetUserStylesheet function as declared in Ultralight/CAPI.h:390
func UlConfigSetUserStylesheet(config ULConfig, css_string ULString) {
	cconfig, cconfigAllocMap := *(*C.ULConfig)(unsafe.Pointer(&config)), cgoAllocsUnknown
	ccss_string, ccss_stringAllocMap := *(*C.ULString)(unsafe.Pointer(&css_string)), cgoAllocsUnknown
	C.ulConfigSetUserStylesheet(cconfig, ccss_string)
	runtime.KeepAlive(ccss_stringAllocMap)
	runtime.KeepAlive(cconfigAllocMap)
}

// UlConfigSetForceRepaint function as declared in Ultralight/CAPI.h:397
func UlConfigSetForceRepaint(config ULConfig, enabled bool) {
	cconfig, cconfigAllocMap := *(*C.ULConfig)(unsafe.Pointer(&config)), cgoAllocsUnknown
	cenabled, cenabledAllocMap := (C._Bool)(enabled), cgoAllocsUnknown
	C.ulConfigSetForceRepaint(cconfig, cenabled)
	runtime.KeepAlive(cenabledAllocMap)
	runtime.KeepAlive(cconfigAllocMap)
}

// UlConfigSetAnimationTimerDelay function as declared in Ultralight/CAPI.h:403
func UlConfigSetAnimationTimerDelay(config ULConfig, delay float64) {
	cconfig, cconfigAllocMap := *(*C.ULConfig)(unsafe.Pointer(&config)), cgoAllocsUnknown
	cdelay, cdelayAllocMap := (C.double)(delay), cgoAllocsUnknown
	C.ulConfigSetAnimationTimerDelay(cconfig, cdelay)
	runtime.KeepAlive(cdelayAllocMap)
	runtime.KeepAlive(cconfigAllocMap)
}

// UlConfigSetScrollTimerDelay function as declared in Ultralight/CAPI.h:409
func UlConfigSetScrollTimerDelay(config ULConfig, delay float64) {
	cconfig, cconfigAllocMap := *(*C.ULConfig)(unsafe.Pointer(&config)), cgoAllocsUnknown
	cdelay, cdelayAllocMap := (C.double)(delay), cgoAllocsUnknown
	C.ulConfigSetScrollTimerDelay(cconfig, cdelay)
	runtime.KeepAlive(cdelayAllocMap)
	runtime.KeepAlive(cconfigAllocMap)
}

// UlConfigSetRecycleDelay function as declared in Ultralight/CAPI.h:415
func UlConfigSetRecycleDelay(config ULConfig, delay float64) {
	cconfig, cconfigAllocMap := *(*C.ULConfig)(unsafe.Pointer(&config)), cgoAllocsUnknown
	cdelay, cdelayAllocMap := (C.double)(delay), cgoAllocsUnknown
	C.ulConfigSetRecycleDelay(cconfig, cdelay)
	runtime.KeepAlive(cdelayAllocMap)
	runtime.KeepAlive(cconfigAllocMap)
}

// UlConfigSetMemoryCacheSize function as declared in Ultralight/CAPI.h:421
func UlConfigSetMemoryCacheSize(config ULConfig, size uint32) {
	cconfig, cconfigAllocMap := *(*C.ULConfig)(unsafe.Pointer(&config)), cgoAllocsUnknown
	csize, csizeAllocMap := (C.uint)(size), cgoAllocsUnknown
	C.ulConfigSetMemoryCacheSize(cconfig, csize)
	runtime.KeepAlive(csizeAllocMap)
	runtime.KeepAlive(cconfigAllocMap)
}

// UlConfigSetPageCacheSize function as declared in Ultralight/CAPI.h:426
func UlConfigSetPageCacheSize(config ULConfig, size uint32) {
	cconfig, cconfigAllocMap := *(*C.ULConfig)(unsafe.Pointer(&config)), cgoAllocsUnknown
	csize, csizeAllocMap := (C.uint)(size), cgoAllocsUnknown
	C.ulConfigSetPageCacheSize(cconfig, csize)
	runtime.KeepAlive(csizeAllocMap)
	runtime.KeepAlive(cconfigAllocMap)
}

// UlConfigSetOverrideRAMSize function as declared in Ultralight/CAPI.h:436
func UlConfigSetOverrideRAMSize(config ULConfig, size uint32) {
	cconfig, cconfigAllocMap := *(*C.ULConfig)(unsafe.Pointer(&config)), cgoAllocsUnknown
	csize, csizeAllocMap := (C.uint)(size), cgoAllocsUnknown
	C.ulConfigSetOverrideRAMSize(cconfig, csize)
	runtime.KeepAlive(csizeAllocMap)
	runtime.KeepAlive(cconfigAllocMap)
}

// UlConfigSetMinLargeHeapSize function as declared in Ultralight/CAPI.h:442
func UlConfigSetMinLargeHeapSize(config ULConfig, size uint32) {
	cconfig, cconfigAllocMap := *(*C.ULConfig)(unsafe.Pointer(&config)), cgoAllocsUnknown
	csize, csizeAllocMap := (C.uint)(size), cgoAllocsUnknown
	C.ulConfigSetMinLargeHeapSize(cconfig, csize)
	runtime.KeepAlive(csizeAllocMap)
	runtime.KeepAlive(cconfigAllocMap)
}

// UlConfigSetMinSmallHeapSize function as declared in Ultralight/CAPI.h:448
func UlConfigSetMinSmallHeapSize(config ULConfig, size uint32) {
	cconfig, cconfigAllocMap := *(*C.ULConfig)(unsafe.Pointer(&config)), cgoAllocsUnknown
	csize, csizeAllocMap := (C.uint)(size), cgoAllocsUnknown
	C.ulConfigSetMinSmallHeapSize(cconfig, csize)
	runtime.KeepAlive(csizeAllocMap)
	runtime.KeepAlive(cconfigAllocMap)
}

// UlCreateRenderer function as declared in Ultralight/CAPI.h:477
func UlCreateRenderer(config ULConfig) ULRenderer {
	cconfig, cconfigAllocMap := *(*C.ULConfig)(unsafe.Pointer(&config)), cgoAllocsUnknown
	__ret := C.ulCreateRenderer(cconfig)
	runtime.KeepAlive(cconfigAllocMap)
	__v := *(*ULRenderer)(unsafe.Pointer(&__ret))
	return __v
}

// UlDestroyRenderer function as declared in Ultralight/CAPI.h:482
func UlDestroyRenderer(renderer ULRenderer) {
	crenderer, crendererAllocMap := *(*C.ULRenderer)(unsafe.Pointer(&renderer)), cgoAllocsUnknown
	C.ulDestroyRenderer(crenderer)
	runtime.KeepAlive(crendererAllocMap)
}

// UlUpdate function as declared in Ultralight/CAPI.h:487
func UlUpdate(renderer ULRenderer) {
	crenderer, crendererAllocMap := *(*C.ULRenderer)(unsafe.Pointer(&renderer)), cgoAllocsUnknown
	C.ulUpdate(crenderer)
	runtime.KeepAlive(crendererAllocMap)
}

// UlRender function as declared in Ultralight/CAPI.h:492
func UlRender(renderer ULRenderer) {
	crenderer, crendererAllocMap := *(*C.ULRenderer)(unsafe.Pointer(&renderer)), cgoAllocsUnknown
	C.ulRender(crenderer)
	runtime.KeepAlive(crendererAllocMap)
}

// UlPurgeMemory function as declared in Ultralight/CAPI.h:498
func UlPurgeMemory(renderer ULRenderer) {
	crenderer, crendererAllocMap := *(*C.ULRenderer)(unsafe.Pointer(&renderer)), cgoAllocsUnknown
	C.ulPurgeMemory(crenderer)
	runtime.KeepAlive(crendererAllocMap)
}

// UlLogMemoryUsage function as declared in Ultralight/CAPI.h:504
func UlLogMemoryUsage(renderer ULRenderer) {
	crenderer, crendererAllocMap := *(*C.ULRenderer)(unsafe.Pointer(&renderer)), cgoAllocsUnknown
	C.ulLogMemoryUsage(crenderer)
	runtime.KeepAlive(crendererAllocMap)
}

// UlCreateSession function as declared in Ultralight/CAPI.h:514
func UlCreateSession(renderer ULRenderer, is_persistent bool, name ULString) ULSession {
	crenderer, crendererAllocMap := *(*C.ULRenderer)(unsafe.Pointer(&renderer)), cgoAllocsUnknown
	cis_persistent, cis_persistentAllocMap := (C._Bool)(is_persistent), cgoAllocsUnknown
	cname, cnameAllocMap := *(*C.ULString)(unsafe.Pointer(&name)), cgoAllocsUnknown
	__ret := C.ulCreateSession(crenderer, cis_persistent, cname)
	runtime.KeepAlive(cnameAllocMap)
	runtime.KeepAlive(cis_persistentAllocMap)
	runtime.KeepAlive(crendererAllocMap)
	__v := *(*ULSession)(unsafe.Pointer(&__ret))
	return __v
}

// UlDestroySession function as declared in Ultralight/CAPI.h:520
func UlDestroySession(session ULSession) {
	csession, csessionAllocMap := *(*C.ULSession)(unsafe.Pointer(&session)), cgoAllocsUnknown
	C.ulDestroySession(csession)
	runtime.KeepAlive(csessionAllocMap)
}

// UlDefaultSession function as declared in Ultralight/CAPI.h:527
func UlDefaultSession(renderer ULRenderer) ULSession {
	crenderer, crendererAllocMap := *(*C.ULRenderer)(unsafe.Pointer(&renderer)), cgoAllocsUnknown
	__ret := C.ulDefaultSession(crenderer)
	runtime.KeepAlive(crendererAllocMap)
	__v := *(*ULSession)(unsafe.Pointer(&__ret))
	return __v
}

// UlSessionIsPersistent function as declared in Ultralight/CAPI.h:532
func UlSessionIsPersistent(session ULSession) bool {
	csession, csessionAllocMap := *(*C.ULSession)(unsafe.Pointer(&session)), cgoAllocsUnknown
	__ret := C.ulSessionIsPersistent(csession)
	runtime.KeepAlive(csessionAllocMap)
	__v := (bool)(__ret)
	return __v
}

// UlSessionGetName function as declared in Ultralight/CAPI.h:537
func UlSessionGetName(session ULSession) ULString {
	csession, csessionAllocMap := *(*C.ULSession)(unsafe.Pointer(&session)), cgoAllocsUnknown
	__ret := C.ulSessionGetName(csession)
	runtime.KeepAlive(csessionAllocMap)
	__v := *(*ULString)(unsafe.Pointer(&__ret))
	return __v
}

// UlSessionGetId function as declared in Ultralight/CAPI.h:542
func UlSessionGetId(session ULSession) uint64 {
	csession, csessionAllocMap := *(*C.ULSession)(unsafe.Pointer(&session)), cgoAllocsUnknown
	__ret := C.ulSessionGetId(csession)
	runtime.KeepAlive(csessionAllocMap)
	__v := (uint64)(__ret)
	return __v
}

// UlSessionGetDiskPath function as declared in Ultralight/CAPI.h:547
func UlSessionGetDiskPath(session ULSession) ULString {
	csession, csessionAllocMap := *(*C.ULSession)(unsafe.Pointer(&session)), cgoAllocsUnknown
	__ret := C.ulSessionGetDiskPath(csession)
	runtime.KeepAlive(csessionAllocMap)
	__v := *(*ULString)(unsafe.Pointer(&__ret))
	return __v
}

// UlCreateView function as declared in Ultralight/CAPI.h:558
func UlCreateView(renderer ULRenderer, width uint32, height uint32, transparent bool, session ULSession, force_cpu_renderer bool) ULView {
	crenderer, crendererAllocMap := *(*C.ULRenderer)(unsafe.Pointer(&renderer)), cgoAllocsUnknown
	cwidth, cwidthAllocMap := (C.uint)(width), cgoAllocsUnknown
	cheight, cheightAllocMap := (C.uint)(height), cgoAllocsUnknown
	ctransparent, ctransparentAllocMap := (C._Bool)(transparent), cgoAllocsUnknown
	csession, csessionAllocMap := *(*C.ULSession)(unsafe.Pointer(&session)), cgoAllocsUnknown
	cforce_cpu_renderer, cforce_cpu_rendererAllocMap := (C._Bool)(force_cpu_renderer), cgoAllocsUnknown
	__ret := C.ulCreateView(crenderer, cwidth, cheight, ctransparent, csession, cforce_cpu_renderer)
	runtime.KeepAlive(cforce_cpu_rendererAllocMap)
	runtime.KeepAlive(csessionAllocMap)
	runtime.KeepAlive(ctransparentAllocMap)
	runtime.KeepAlive(cheightAllocMap)
	runtime.KeepAlive(cwidthAllocMap)
	runtime.KeepAlive(crendererAllocMap)
	__v := *(*ULView)(unsafe.Pointer(&__ret))
	return __v
}

// UlDestroyView function as declared in Ultralight/CAPI.h:565
func UlDestroyView(view ULView) {
	cview, cviewAllocMap := *(*C.ULView)(unsafe.Pointer(&view)), cgoAllocsUnknown
	C.ulDestroyView(cview)
	runtime.KeepAlive(cviewAllocMap)
}

// UlViewGetURL function as declared in Ultralight/CAPI.h:572
func UlViewGetURL(view ULView) ULString {
	cview, cviewAllocMap := *(*C.ULView)(unsafe.Pointer(&view)), cgoAllocsUnknown
	__ret := C.ulViewGetURL(cview)
	runtime.KeepAlive(cviewAllocMap)
	__v := *(*ULString)(unsafe.Pointer(&__ret))
	return __v
}

// UlViewGetTitle function as declared in Ultralight/CAPI.h:579
func UlViewGetTitle(view ULView) ULString {
	cview, cviewAllocMap := *(*C.ULView)(unsafe.Pointer(&view)), cgoAllocsUnknown
	__ret := C.ulViewGetTitle(cview)
	runtime.KeepAlive(cviewAllocMap)
	__v := *(*ULString)(unsafe.Pointer(&__ret))
	return __v
}

// UlViewGetWidth function as declared in Ultralight/CAPI.h:584
func UlViewGetWidth(view ULView) uint32 {
	cview, cviewAllocMap := *(*C.ULView)(unsafe.Pointer(&view)), cgoAllocsUnknown
	__ret := C.ulViewGetWidth(cview)
	runtime.KeepAlive(cviewAllocMap)
	__v := (uint32)(__ret)
	return __v
}

// UlViewGetHeight function as declared in Ultralight/CAPI.h:589
func UlViewGetHeight(view ULView) uint32 {
	cview, cviewAllocMap := *(*C.ULView)(unsafe.Pointer(&view)), cgoAllocsUnknown
	__ret := C.ulViewGetHeight(cview)
	runtime.KeepAlive(cviewAllocMap)
	__v := (uint32)(__ret)
	return __v
}

// UlViewIsLoading function as declared in Ultralight/CAPI.h:594
func UlViewIsLoading(view ULView) bool {
	cview, cviewAllocMap := *(*C.ULView)(unsafe.Pointer(&view)), cgoAllocsUnknown
	__ret := C.ulViewIsLoading(cview)
	runtime.KeepAlive(cviewAllocMap)
	__v := (bool)(__ret)
	return __v
}

// UlViewGetRenderTarget function as declared in Ultralight/CAPI.h:601
func UlViewGetRenderTarget(view ULView) ULRenderTarget {
	cview, cviewAllocMap := *(*C.ULView)(unsafe.Pointer(&view)), cgoAllocsUnknown
	__ret := C.ulViewGetRenderTarget(cview)
	runtime.KeepAlive(cviewAllocMap)
	__v := *NewULRenderTargetRef(unsafe.Pointer(&__ret))
	return __v
}

// UlViewGetSurface function as declared in Ultralight/CAPI.h:617
func UlViewGetSurface(view ULView) ULSurface {
	cview, cviewAllocMap := *(*C.ULView)(unsafe.Pointer(&view)), cgoAllocsUnknown
	__ret := C.ulViewGetSurface(cview)
	runtime.KeepAlive(cviewAllocMap)
	__v := *(*ULSurface)(unsafe.Pointer(&__ret))
	return __v
}

// UlViewLoadHTML function as declared in Ultralight/CAPI.h:622
func UlViewLoadHTML(view ULView, html_string ULString) {
	cview, cviewAllocMap := *(*C.ULView)(unsafe.Pointer(&view)), cgoAllocsUnknown
	chtml_string, chtml_stringAllocMap := *(*C.ULString)(unsafe.Pointer(&html_string)), cgoAllocsUnknown
	C.ulViewLoadHTML(cview, chtml_string)
	runtime.KeepAlive(chtml_stringAllocMap)
	runtime.KeepAlive(cviewAllocMap)
}

// UlViewLoadURL function as declared in Ultralight/CAPI.h:627
func UlViewLoadURL(view ULView, url_string ULString) {
	cview, cviewAllocMap := *(*C.ULView)(unsafe.Pointer(&view)), cgoAllocsUnknown
	curl_string, curl_stringAllocMap := *(*C.ULString)(unsafe.Pointer(&url_string)), cgoAllocsUnknown
	C.ulViewLoadURL(cview, curl_string)
	runtime.KeepAlive(curl_stringAllocMap)
	runtime.KeepAlive(cviewAllocMap)
}

// UlViewResize function as declared in Ultralight/CAPI.h:632
func UlViewResize(view ULView, width uint32, height uint32) {
	cview, cviewAllocMap := *(*C.ULView)(unsafe.Pointer(&view)), cgoAllocsUnknown
	cwidth, cwidthAllocMap := (C.uint)(width), cgoAllocsUnknown
	cheight, cheightAllocMap := (C.uint)(height), cgoAllocsUnknown
	C.ulViewResize(cview, cwidth, cheight)
	runtime.KeepAlive(cheightAllocMap)
	runtime.KeepAlive(cwidthAllocMap)
	runtime.KeepAlive(cviewAllocMap)
}

// UlViewLockJSContext function as declared in Ultralight/CAPI.h:645
func UlViewLockJSContext(view ULView) JSContextRef {
	cview, cviewAllocMap := *(*C.ULView)(unsafe.Pointer(&view)), cgoAllocsUnknown
	__ret := C.ulViewLockJSContext(cview)
	runtime.KeepAlive(cviewAllocMap)
	__v := *(*JSContextRef)(unsafe.Pointer(&__ret))
	return __v
}

// UlViewUnlockJSContext function as declared in Ultralight/CAPI.h:650
func UlViewUnlockJSContext(view ULView) {
	cview, cviewAllocMap := *(*C.ULView)(unsafe.Pointer(&view)), cgoAllocsUnknown
	C.ulViewUnlockJSContext(cview)
	runtime.KeepAlive(cviewAllocMap)
}

// UlViewEvaluateScript function as declared in Ultralight/CAPI.h:674
func UlViewEvaluateScript(view ULView, js_string ULString, exception []ULString) ULString {
	cview, cviewAllocMap := *(*C.ULView)(unsafe.Pointer(&view)), cgoAllocsUnknown
	cjs_string, cjs_stringAllocMap := *(*C.ULString)(unsafe.Pointer(&js_string)), cgoAllocsUnknown
	cexception, cexceptionAllocMap := copyPULStringBytes((*sliceHeader)(unsafe.Pointer(&exception)))
	__ret := C.ulViewEvaluateScript(cview, cjs_string, cexception)
	runtime.KeepAlive(cexceptionAllocMap)
	runtime.KeepAlive(cjs_stringAllocMap)
	runtime.KeepAlive(cviewAllocMap)
	__v := *(*ULString)(unsafe.Pointer(&__ret))
	return __v
}

// UlViewCanGoBack function as declared in Ultralight/CAPI.h:679
func UlViewCanGoBack(view ULView) bool {
	cview, cviewAllocMap := *(*C.ULView)(unsafe.Pointer(&view)), cgoAllocsUnknown
	__ret := C.ulViewCanGoBack(cview)
	runtime.KeepAlive(cviewAllocMap)
	__v := (bool)(__ret)
	return __v
}

// UlViewCanGoForward function as declared in Ultralight/CAPI.h:684
func UlViewCanGoForward(view ULView) bool {
	cview, cviewAllocMap := *(*C.ULView)(unsafe.Pointer(&view)), cgoAllocsUnknown
	__ret := C.ulViewCanGoForward(cview)
	runtime.KeepAlive(cviewAllocMap)
	__v := (bool)(__ret)
	return __v
}

// UlViewGoBack function as declared in Ultralight/CAPI.h:689
func UlViewGoBack(view ULView) {
	cview, cviewAllocMap := *(*C.ULView)(unsafe.Pointer(&view)), cgoAllocsUnknown
	C.ulViewGoBack(cview)
	runtime.KeepAlive(cviewAllocMap)
}

// UlViewGoForward function as declared in Ultralight/CAPI.h:694
func UlViewGoForward(view ULView) {
	cview, cviewAllocMap := *(*C.ULView)(unsafe.Pointer(&view)), cgoAllocsUnknown
	C.ulViewGoForward(cview)
	runtime.KeepAlive(cviewAllocMap)
}

// UlViewGoToHistoryOffset function as declared in Ultralight/CAPI.h:699
func UlViewGoToHistoryOffset(view ULView, offset int32) {
	cview, cviewAllocMap := *(*C.ULView)(unsafe.Pointer(&view)), cgoAllocsUnknown
	coffset, coffsetAllocMap := (C.int)(offset), cgoAllocsUnknown
	C.ulViewGoToHistoryOffset(cview, coffset)
	runtime.KeepAlive(coffsetAllocMap)
	runtime.KeepAlive(cviewAllocMap)
}

// UlViewReload function as declared in Ultralight/CAPI.h:704
func UlViewReload(view ULView) {
	cview, cviewAllocMap := *(*C.ULView)(unsafe.Pointer(&view)), cgoAllocsUnknown
	C.ulViewReload(cview)
	runtime.KeepAlive(cviewAllocMap)
}

// UlViewStop function as declared in Ultralight/CAPI.h:709
func UlViewStop(view ULView) {
	cview, cviewAllocMap := *(*C.ULView)(unsafe.Pointer(&view)), cgoAllocsUnknown
	C.ulViewStop(cview)
	runtime.KeepAlive(cviewAllocMap)
}

// UlViewFocus function as declared in Ultralight/CAPI.h:717
func UlViewFocus(view ULView) {
	cview, cviewAllocMap := *(*C.ULView)(unsafe.Pointer(&view)), cgoAllocsUnknown
	C.ulViewFocus(cview)
	runtime.KeepAlive(cviewAllocMap)
}

// UlViewUnfocus function as declared in Ultralight/CAPI.h:725
func UlViewUnfocus(view ULView) {
	cview, cviewAllocMap := *(*C.ULView)(unsafe.Pointer(&view)), cgoAllocsUnknown
	C.ulViewUnfocus(cview)
	runtime.KeepAlive(cviewAllocMap)
}

// UlViewHasFocus function as declared in Ultralight/CAPI.h:730
func UlViewHasFocus(view ULView) bool {
	cview, cviewAllocMap := *(*C.ULView)(unsafe.Pointer(&view)), cgoAllocsUnknown
	__ret := C.ulViewHasFocus(cview)
	runtime.KeepAlive(cviewAllocMap)
	__v := (bool)(__ret)
	return __v
}

// UlViewHasInputFocus function as declared in Ultralight/CAPI.h:739
func UlViewHasInputFocus(view ULView) bool {
	cview, cviewAllocMap := *(*C.ULView)(unsafe.Pointer(&view)), cgoAllocsUnknown
	__ret := C.ulViewHasInputFocus(cview)
	runtime.KeepAlive(cviewAllocMap)
	__v := (bool)(__ret)
	return __v
}

// UlViewFireKeyEvent function as declared in Ultralight/CAPI.h:744
func UlViewFireKeyEvent(view ULView, key_event ULKeyEvent) {
	cview, cviewAllocMap := *(*C.ULView)(unsafe.Pointer(&view)), cgoAllocsUnknown
	ckey_event, ckey_eventAllocMap := *(*C.ULKeyEvent)(unsafe.Pointer(&key_event)), cgoAllocsUnknown
	C.ulViewFireKeyEvent(cview, ckey_event)
	runtime.KeepAlive(ckey_eventAllocMap)
	runtime.KeepAlive(cviewAllocMap)
}

// UlViewFireMouseEvent function as declared in Ultralight/CAPI.h:749
func UlViewFireMouseEvent(view ULView, mouse_event ULMouseEvent) {
	cview, cviewAllocMap := *(*C.ULView)(unsafe.Pointer(&view)), cgoAllocsUnknown
	cmouse_event, cmouse_eventAllocMap := *(*C.ULMouseEvent)(unsafe.Pointer(&mouse_event)), cgoAllocsUnknown
	C.ulViewFireMouseEvent(cview, cmouse_event)
	runtime.KeepAlive(cmouse_eventAllocMap)
	runtime.KeepAlive(cviewAllocMap)
}

// UlViewFireScrollEvent function as declared in Ultralight/CAPI.h:754
func UlViewFireScrollEvent(view ULView, scroll_event ULScrollEvent) {
	cview, cviewAllocMap := *(*C.ULView)(unsafe.Pointer(&view)), cgoAllocsUnknown
	cscroll_event, cscroll_eventAllocMap := *(*C.ULScrollEvent)(unsafe.Pointer(&scroll_event)), cgoAllocsUnknown
	C.ulViewFireScrollEvent(cview, cscroll_event)
	runtime.KeepAlive(cscroll_eventAllocMap)
	runtime.KeepAlive(cviewAllocMap)
}

// UlViewSetChangeTitleCallback function as declared in Ultralight/CAPI.h:762
func UlViewSetChangeTitleCallback(view ULView, callback ULChangeTitleCallback, user_data unsafe.Pointer) {
	cview, cviewAllocMap := *(*C.ULView)(unsafe.Pointer(&view)), cgoAllocsUnknown
	ccallback, ccallbackAllocMap := callback.PassValue()
	cuser_data, cuser_dataAllocMap := user_data, cgoAllocsUnknown
	C.ulViewSetChangeTitleCallback(cview, ccallback, cuser_data)
	runtime.KeepAlive(cuser_dataAllocMap)
	runtime.KeepAlive(ccallbackAllocMap)
	runtime.KeepAlive(cviewAllocMap)
}

// UlViewSetChangeURLCallback function as declared in Ultralight/CAPI.h:772
func UlViewSetChangeURLCallback(view ULView, callback ULChangeURLCallback, user_data unsafe.Pointer) {
	cview, cviewAllocMap := *(*C.ULView)(unsafe.Pointer(&view)), cgoAllocsUnknown
	ccallback, ccallbackAllocMap := callback.PassValue()
	cuser_data, cuser_dataAllocMap := user_data, cgoAllocsUnknown
	C.ulViewSetChangeURLCallback(cview, ccallback, cuser_data)
	runtime.KeepAlive(cuser_dataAllocMap)
	runtime.KeepAlive(ccallbackAllocMap)
	runtime.KeepAlive(cviewAllocMap)
}

// UlViewSetChangeTooltipCallback function as declared in Ultralight/CAPI.h:782
func UlViewSetChangeTooltipCallback(view ULView, callback ULChangeTooltipCallback, user_data unsafe.Pointer) {
	cview, cviewAllocMap := *(*C.ULView)(unsafe.Pointer(&view)), cgoAllocsUnknown
	ccallback, ccallbackAllocMap := callback.PassValue()
	cuser_data, cuser_dataAllocMap := user_data, cgoAllocsUnknown
	C.ulViewSetChangeTooltipCallback(cview, ccallback, cuser_data)
	runtime.KeepAlive(cuser_dataAllocMap)
	runtime.KeepAlive(ccallbackAllocMap)
	runtime.KeepAlive(cviewAllocMap)
}

// UlViewSetChangeCursorCallback function as declared in Ultralight/CAPI.h:792
func UlViewSetChangeCursorCallback(view ULView, callback ULChangeCursorCallback, user_data unsafe.Pointer) {
	cview, cviewAllocMap := *(*C.ULView)(unsafe.Pointer(&view)), cgoAllocsUnknown
	ccallback, ccallbackAllocMap := callback.PassValue()
	cuser_data, cuser_dataAllocMap := user_data, cgoAllocsUnknown
	C.ulViewSetChangeCursorCallback(cview, ccallback, cuser_data)
	runtime.KeepAlive(cuser_dataAllocMap)
	runtime.KeepAlive(ccallbackAllocMap)
	runtime.KeepAlive(cviewAllocMap)
}

// UlViewSetAddConsoleMessageCallback function as declared in Ultralight/CAPI.h:807
func UlViewSetAddConsoleMessageCallback(view ULView, callback ULAddConsoleMessageCallback, user_data unsafe.Pointer) {
	cview, cviewAllocMap := *(*C.ULView)(unsafe.Pointer(&view)), cgoAllocsUnknown
	ccallback, ccallbackAllocMap := callback.PassValue()
	cuser_data, cuser_dataAllocMap := user_data, cgoAllocsUnknown
	C.ulViewSetAddConsoleMessageCallback(cview, ccallback, cuser_data)
	runtime.KeepAlive(cuser_dataAllocMap)
	runtime.KeepAlive(ccallbackAllocMap)
	runtime.KeepAlive(cviewAllocMap)
}

// UlViewSetCreateChildViewCallback function as declared in Ultralight/CAPI.h:828
func UlViewSetCreateChildViewCallback(view ULView, callback ULCreateChildViewCallback, user_data unsafe.Pointer) {
	cview, cviewAllocMap := *(*C.ULView)(unsafe.Pointer(&view)), cgoAllocsUnknown
	ccallback, ccallbackAllocMap := callback.PassValue()
	cuser_data, cuser_dataAllocMap := user_data, cgoAllocsUnknown
	C.ulViewSetCreateChildViewCallback(cview, ccallback, cuser_data)
	runtime.KeepAlive(cuser_dataAllocMap)
	runtime.KeepAlive(ccallbackAllocMap)
	runtime.KeepAlive(cviewAllocMap)
}

// UlViewSetBeginLoadingCallback function as declared in Ultralight/CAPI.h:839
func UlViewSetBeginLoadingCallback(view ULView, callback ULBeginLoadingCallback, user_data unsafe.Pointer) {
	cview, cviewAllocMap := *(*C.ULView)(unsafe.Pointer(&view)), cgoAllocsUnknown
	ccallback, ccallbackAllocMap := callback.PassValue()
	cuser_data, cuser_dataAllocMap := user_data, cgoAllocsUnknown
	C.ulViewSetBeginLoadingCallback(cview, ccallback, cuser_data)
	runtime.KeepAlive(cuser_dataAllocMap)
	runtime.KeepAlive(ccallbackAllocMap)
	runtime.KeepAlive(cviewAllocMap)
}

// UlViewSetFinishLoadingCallback function as declared in Ultralight/CAPI.h:850
func UlViewSetFinishLoadingCallback(view ULView, callback ULFinishLoadingCallback, user_data unsafe.Pointer) {
	cview, cviewAllocMap := *(*C.ULView)(unsafe.Pointer(&view)), cgoAllocsUnknown
	ccallback, ccallbackAllocMap := callback.PassValue()
	cuser_data, cuser_dataAllocMap := user_data, cgoAllocsUnknown
	C.ulViewSetFinishLoadingCallback(cview, ccallback, cuser_data)
	runtime.KeepAlive(cuser_dataAllocMap)
	runtime.KeepAlive(ccallbackAllocMap)
	runtime.KeepAlive(cviewAllocMap)
}

// UlViewSetFailLoadingCallback function as declared in Ultralight/CAPI.h:862
func UlViewSetFailLoadingCallback(view ULView, callback ULFailLoadingCallback, user_data unsafe.Pointer) {
	cview, cviewAllocMap := *(*C.ULView)(unsafe.Pointer(&view)), cgoAllocsUnknown
	ccallback, ccallbackAllocMap := callback.PassValue()
	cuser_data, cuser_dataAllocMap := user_data, cgoAllocsUnknown
	C.ulViewSetFailLoadingCallback(cview, ccallback, cuser_data)
	runtime.KeepAlive(cuser_dataAllocMap)
	runtime.KeepAlive(ccallbackAllocMap)
	runtime.KeepAlive(cviewAllocMap)
}

// UlViewSetWindowObjectReadyCallback function as declared in Ultralight/CAPI.h:884
func UlViewSetWindowObjectReadyCallback(view ULView, callback ULWindowObjectReadyCallback, user_data unsafe.Pointer) {
	cview, cviewAllocMap := *(*C.ULView)(unsafe.Pointer(&view)), cgoAllocsUnknown
	ccallback, ccallbackAllocMap := callback.PassValue()
	cuser_data, cuser_dataAllocMap := user_data, cgoAllocsUnknown
	C.ulViewSetWindowObjectReadyCallback(cview, ccallback, cuser_data)
	runtime.KeepAlive(cuser_dataAllocMap)
	runtime.KeepAlive(ccallbackAllocMap)
	runtime.KeepAlive(cviewAllocMap)
}

// UlViewSetDOMReadyCallback function as declared in Ultralight/CAPI.h:899
func UlViewSetDOMReadyCallback(view ULView, callback ULDOMReadyCallback, user_data unsafe.Pointer) {
	cview, cviewAllocMap := *(*C.ULView)(unsafe.Pointer(&view)), cgoAllocsUnknown
	ccallback, ccallbackAllocMap := callback.PassValue()
	cuser_data, cuser_dataAllocMap := user_data, cgoAllocsUnknown
	C.ulViewSetDOMReadyCallback(cview, ccallback, cuser_data)
	runtime.KeepAlive(cuser_dataAllocMap)
	runtime.KeepAlive(ccallbackAllocMap)
	runtime.KeepAlive(cviewAllocMap)
}

// UlViewSetUpdateHistoryCallback function as declared in Ultralight/CAPI.h:909
func UlViewSetUpdateHistoryCallback(view ULView, callback ULUpdateHistoryCallback, user_data unsafe.Pointer) {
	cview, cviewAllocMap := *(*C.ULView)(unsafe.Pointer(&view)), cgoAllocsUnknown
	ccallback, ccallbackAllocMap := callback.PassValue()
	cuser_data, cuser_dataAllocMap := user_data, cgoAllocsUnknown
	C.ulViewSetUpdateHistoryCallback(cview, ccallback, cuser_data)
	runtime.KeepAlive(cuser_dataAllocMap)
	runtime.KeepAlive(ccallbackAllocMap)
	runtime.KeepAlive(cviewAllocMap)
}

// UlViewSetNeedsPaint function as declared in Ultralight/CAPI.h:920
func UlViewSetNeedsPaint(view ULView, needs_paint bool) {
	cview, cviewAllocMap := *(*C.ULView)(unsafe.Pointer(&view)), cgoAllocsUnknown
	cneeds_paint, cneeds_paintAllocMap := (C._Bool)(needs_paint), cgoAllocsUnknown
	C.ulViewSetNeedsPaint(cview, cneeds_paint)
	runtime.KeepAlive(cneeds_paintAllocMap)
	runtime.KeepAlive(cviewAllocMap)
}

// UlViewGetNeedsPaint function as declared in Ultralight/CAPI.h:925
func UlViewGetNeedsPaint(view ULView) bool {
	cview, cviewAllocMap := *(*C.ULView)(unsafe.Pointer(&view)), cgoAllocsUnknown
	__ret := C.ulViewGetNeedsPaint(cview)
	runtime.KeepAlive(cviewAllocMap)
	__v := (bool)(__ret)
	return __v
}

// UlViewCreateInspectorView function as declared in Ultralight/CAPI.h:940
func UlViewCreateInspectorView(view ULView) ULView {
	cview, cviewAllocMap := *(*C.ULView)(unsafe.Pointer(&view)), cgoAllocsUnknown
	__ret := C.ulViewCreateInspectorView(cview)
	runtime.KeepAlive(cviewAllocMap)
	__v := *(*ULView)(unsafe.Pointer(&__ret))
	return __v
}

// UlCreateString function as declared in Ultralight/CAPI.h:949
func UlCreateString(str string) ULString {
	str = safeString(str)
	cstr, cstrAllocMap := unpackPCharString(str)
	__ret := C.ulCreateString(cstr)
	runtime.KeepAlive(str)
	runtime.KeepAlive(cstrAllocMap)
	__v := *(*ULString)(unsafe.Pointer(&__ret))
	return __v
}

// UlCreateStringUTF8 function as declared in Ultralight/CAPI.h:954
func UlCreateStringUTF8(str string, len uint64) ULString {
	str = safeString(str)
	cstr, cstrAllocMap := unpackPCharString(str)
	clen, clenAllocMap := (C.size_t)(len), cgoAllocsUnknown
	__ret := C.ulCreateStringUTF8(cstr, clen)
	runtime.KeepAlive(clenAllocMap)
	runtime.KeepAlive(str)
	runtime.KeepAlive(cstrAllocMap)
	__v := *(*ULString)(unsafe.Pointer(&__ret))
	return __v
}

// UlCreateStringUTF16 function as declared in Ultralight/CAPI.h:959
func UlCreateStringUTF16(str []ULChar16, len uint64) ULString {
	cstr, cstrAllocMap := copyPULChar16Bytes((*sliceHeader)(unsafe.Pointer(&str)))
	clen, clenAllocMap := (C.size_t)(len), cgoAllocsUnknown
	__ret := C.ulCreateStringUTF16(cstr, clen)
	runtime.KeepAlive(clenAllocMap)
	runtime.KeepAlive(cstrAllocMap)
	__v := *(*ULString)(unsafe.Pointer(&__ret))
	return __v
}

// UlCreateStringFromCopy function as declared in Ultralight/CAPI.h:964
// func UlCreateStringFromCopy(str ULString) ULString {
// 	cstr, cstrAllocMap := *(*C.ULString)(unsafe.Pointer(&str)), cgoAllocsUnknown
// 	__ret := C.ulCreateStringFromCopy(cstr)
// 	runtime.KeepAlive(cstrAllocMap)
// 	__v := *(*ULString)(unsafe.Pointer(&__ret))
// 	return __v
// }

// UlDestroyString function as declared in Ultralight/CAPI.h:969
func UlDestroyString(str ULString) {
	cstr, cstrAllocMap := *(*C.ULString)(unsafe.Pointer(&str)), cgoAllocsUnknown
	C.ulDestroyString(cstr)
	runtime.KeepAlive(cstrAllocMap)
}

// UlStringGetData function as declared in Ultralight/CAPI.h:974
func UlStringGetData(str ULString) *ULChar16 {
	cstr, cstrAllocMap := *(*C.ULString)(unsafe.Pointer(&str)), cgoAllocsUnknown
	__ret := C.ulStringGetData(cstr)
	runtime.KeepAlive(cstrAllocMap)
	__v := *(**ULChar16)(unsafe.Pointer(&__ret))
	return __v
}

// UlStringGetLength function as declared in Ultralight/CAPI.h:979
func UlStringGetLength(str ULString) uint64 {
	cstr, cstrAllocMap := *(*C.ULString)(unsafe.Pointer(&str)), cgoAllocsUnknown
	__ret := C.ulStringGetLength(cstr)
	runtime.KeepAlive(cstrAllocMap)
	__v := (uint64)(__ret)
	return __v
}

// UlStringIsEmpty function as declared in Ultralight/CAPI.h:984
func UlStringIsEmpty(str ULString) bool {
	cstr, cstrAllocMap := *(*C.ULString)(unsafe.Pointer(&str)), cgoAllocsUnknown
	__ret := C.ulStringIsEmpty(cstr)
	runtime.KeepAlive(cstrAllocMap)
	__v := (bool)(__ret)
	return __v
}

// UlStringAssignString function as declared in Ultralight/CAPI.h:989
func UlStringAssignString(str ULString, new_str ULString) {
	cstr, cstrAllocMap := *(*C.ULString)(unsafe.Pointer(&str)), cgoAllocsUnknown
	cnew_str, cnew_strAllocMap := *(*C.ULString)(unsafe.Pointer(&new_str)), cgoAllocsUnknown
	C.ulStringAssignString(cstr, cnew_str)
	runtime.KeepAlive(cnew_strAllocMap)
	runtime.KeepAlive(cstrAllocMap)
}

// UlStringAssignCString function as declared in Ultralight/CAPI.h:994
func UlStringAssignCString(str ULString, c_str string) {
	cstr, cstrAllocMap := *(*C.ULString)(unsafe.Pointer(&str)), cgoAllocsUnknown
	c_str = safeString(c_str)
	cc_str, cc_strAllocMap := unpackPCharString(c_str)
	C.ulStringAssignCString(cstr, cc_str)
	runtime.KeepAlive(c_str)
	runtime.KeepAlive(cc_strAllocMap)
	runtime.KeepAlive(cstrAllocMap)
}

// UlCreateEmptyBitmap function as declared in Ultralight/CAPI.h:1003
func UlCreateEmptyBitmap() ULBitmap {
	__ret := C.ulCreateEmptyBitmap()
	__v := *(*ULBitmap)(unsafe.Pointer(&__ret))
	return __v
}

// UlCreateBitmap function as declared in Ultralight/CAPI.h:1008
func UlCreateBitmap(width uint32, height uint32, format ULBitmapFormat) ULBitmap {
	cwidth, cwidthAllocMap := (C.uint)(width), cgoAllocsUnknown
	cheight, cheightAllocMap := (C.uint)(height), cgoAllocsUnknown
	cformat, cformatAllocMap := (C.ULBitmapFormat)(format), cgoAllocsUnknown
	__ret := C.ulCreateBitmap(cwidth, cheight, cformat)
	runtime.KeepAlive(cformatAllocMap)
	runtime.KeepAlive(cheightAllocMap)
	runtime.KeepAlive(cwidthAllocMap)
	__v := *(*ULBitmap)(unsafe.Pointer(&__ret))
	return __v
}

// UlCreateBitmapFromPixels function as declared in Ultralight/CAPI.h:1015
func UlCreateBitmapFromPixels(width uint32, height uint32, format ULBitmapFormat, row_bytes uint32, pixels unsafe.Pointer, size uint64, should_copy bool) ULBitmap {
	cwidth, cwidthAllocMap := (C.uint)(width), cgoAllocsUnknown
	cheight, cheightAllocMap := (C.uint)(height), cgoAllocsUnknown
	cformat, cformatAllocMap := (C.ULBitmapFormat)(format), cgoAllocsUnknown
	crow_bytes, crow_bytesAllocMap := (C.uint)(row_bytes), cgoAllocsUnknown
	cpixels, cpixelsAllocMap := pixels, cgoAllocsUnknown
	csize, csizeAllocMap := (C.size_t)(size), cgoAllocsUnknown
	cshould_copy, cshould_copyAllocMap := (C._Bool)(should_copy), cgoAllocsUnknown
	__ret := C.ulCreateBitmapFromPixels(cwidth, cheight, cformat, crow_bytes, cpixels, csize, cshould_copy)
	runtime.KeepAlive(cshould_copyAllocMap)
	runtime.KeepAlive(csizeAllocMap)
	runtime.KeepAlive(cpixelsAllocMap)
	runtime.KeepAlive(crow_bytesAllocMap)
	runtime.KeepAlive(cformatAllocMap)
	runtime.KeepAlive(cheightAllocMap)
	runtime.KeepAlive(cwidthAllocMap)
	__v := *(*ULBitmap)(unsafe.Pointer(&__ret))
	return __v
}

// UlCreateBitmapFromCopy function as declared in Ultralight/CAPI.h:1025
func UlCreateBitmapFromCopy(existing_bitmap ULBitmap) ULBitmap {
	cexisting_bitmap, cexisting_bitmapAllocMap := *(*C.ULBitmap)(unsafe.Pointer(&existing_bitmap)), cgoAllocsUnknown
	__ret := C.ulCreateBitmapFromCopy(cexisting_bitmap)
	runtime.KeepAlive(cexisting_bitmapAllocMap)
	__v := *(*ULBitmap)(unsafe.Pointer(&__ret))
	return __v
}

// UlDestroyBitmap function as declared in Ultralight/CAPI.h:1031
func UlDestroyBitmap(bitmap ULBitmap) {
	cbitmap, cbitmapAllocMap := *(*C.ULBitmap)(unsafe.Pointer(&bitmap)), cgoAllocsUnknown
	C.ulDestroyBitmap(cbitmap)
	runtime.KeepAlive(cbitmapAllocMap)
}

// UlBitmapGetWidth function as declared in Ultralight/CAPI.h:1036
func UlBitmapGetWidth(bitmap ULBitmap) uint32 {
	cbitmap, cbitmapAllocMap := *(*C.ULBitmap)(unsafe.Pointer(&bitmap)), cgoAllocsUnknown
	__ret := C.ulBitmapGetWidth(cbitmap)
	runtime.KeepAlive(cbitmapAllocMap)
	__v := (uint32)(__ret)
	return __v
}

// UlBitmapGetHeight function as declared in Ultralight/CAPI.h:1041
func UlBitmapGetHeight(bitmap ULBitmap) uint32 {
	cbitmap, cbitmapAllocMap := *(*C.ULBitmap)(unsafe.Pointer(&bitmap)), cgoAllocsUnknown
	__ret := C.ulBitmapGetHeight(cbitmap)
	runtime.KeepAlive(cbitmapAllocMap)
	__v := (uint32)(__ret)
	return __v
}

// UlBitmapGetFormat function as declared in Ultralight/CAPI.h:1046
func UlBitmapGetFormat(bitmap ULBitmap) ULBitmapFormat {
	cbitmap, cbitmapAllocMap := *(*C.ULBitmap)(unsafe.Pointer(&bitmap)), cgoAllocsUnknown
	__ret := C.ulBitmapGetFormat(cbitmap)
	runtime.KeepAlive(cbitmapAllocMap)
	__v := (ULBitmapFormat)(__ret)
	return __v
}

// UlBitmapGetBpp function as declared in Ultralight/CAPI.h:1051
func UlBitmapGetBpp(bitmap ULBitmap) uint32 {
	cbitmap, cbitmapAllocMap := *(*C.ULBitmap)(unsafe.Pointer(&bitmap)), cgoAllocsUnknown
	__ret := C.ulBitmapGetBpp(cbitmap)
	runtime.KeepAlive(cbitmapAllocMap)
	__v := (uint32)(__ret)
	return __v
}

// UlBitmapGetRowBytes function as declared in Ultralight/CAPI.h:1056
func UlBitmapGetRowBytes(bitmap ULBitmap) uint32 {
	cbitmap, cbitmapAllocMap := *(*C.ULBitmap)(unsafe.Pointer(&bitmap)), cgoAllocsUnknown
	__ret := C.ulBitmapGetRowBytes(cbitmap)
	runtime.KeepAlive(cbitmapAllocMap)
	__v := (uint32)(__ret)
	return __v
}

// UlBitmapGetSize function as declared in Ultralight/CAPI.h:1061
func UlBitmapGetSize(bitmap ULBitmap) uint64 {
	cbitmap, cbitmapAllocMap := *(*C.ULBitmap)(unsafe.Pointer(&bitmap)), cgoAllocsUnknown
	__ret := C.ulBitmapGetSize(cbitmap)
	runtime.KeepAlive(cbitmapAllocMap)
	__v := (uint64)(__ret)
	return __v
}

// UlBitmapOwnsPixels function as declared in Ultralight/CAPI.h:1066
func UlBitmapOwnsPixels(bitmap ULBitmap) bool {
	cbitmap, cbitmapAllocMap := *(*C.ULBitmap)(unsafe.Pointer(&bitmap)), cgoAllocsUnknown
	__ret := C.ulBitmapOwnsPixels(cbitmap)
	runtime.KeepAlive(cbitmapAllocMap)
	__v := (bool)(__ret)
	return __v
}

// UlBitmapLockPixels function as declared in Ultralight/CAPI.h:1071
func UlBitmapLockPixels(bitmap ULBitmap) unsafe.Pointer {
	cbitmap, cbitmapAllocMap := *(*C.ULBitmap)(unsafe.Pointer(&bitmap)), cgoAllocsUnknown
	__ret := C.ulBitmapLockPixels(cbitmap)
	runtime.KeepAlive(cbitmapAllocMap)
	__v := *(*unsafe.Pointer)(unsafe.Pointer(&__ret))
	return __v
}

// UlBitmapUnlockPixels function as declared in Ultralight/CAPI.h:1076
func UlBitmapUnlockPixels(bitmap ULBitmap) {
	cbitmap, cbitmapAllocMap := *(*C.ULBitmap)(unsafe.Pointer(&bitmap)), cgoAllocsUnknown
	C.ulBitmapUnlockPixels(cbitmap)
	runtime.KeepAlive(cbitmapAllocMap)
}

// UlBitmapRawPixels function as declared in Ultralight/CAPI.h:1082
func UlBitmapRawPixels(bitmap ULBitmap) unsafe.Pointer {
	cbitmap, cbitmapAllocMap := *(*C.ULBitmap)(unsafe.Pointer(&bitmap)), cgoAllocsUnknown
	__ret := C.ulBitmapRawPixels(cbitmap)
	runtime.KeepAlive(cbitmapAllocMap)
	__v := *(*unsafe.Pointer)(unsafe.Pointer(&__ret))
	return __v
}

// UlBitmapIsEmpty function as declared in Ultralight/CAPI.h:1087
func UlBitmapIsEmpty(bitmap ULBitmap) bool {
	cbitmap, cbitmapAllocMap := *(*C.ULBitmap)(unsafe.Pointer(&bitmap)), cgoAllocsUnknown
	__ret := C.ulBitmapIsEmpty(cbitmap)
	runtime.KeepAlive(cbitmapAllocMap)
	__v := (bool)(__ret)
	return __v
}

// UlBitmapErase function as declared in Ultralight/CAPI.h:1092
func UlBitmapErase(bitmap ULBitmap) {
	cbitmap, cbitmapAllocMap := *(*C.ULBitmap)(unsafe.Pointer(&bitmap)), cgoAllocsUnknown
	C.ulBitmapErase(cbitmap)
	runtime.KeepAlive(cbitmapAllocMap)
}

// UlBitmapWritePNG function as declared in Ultralight/CAPI.h:1097
func UlBitmapWritePNG(bitmap ULBitmap, path string) bool {
	cbitmap, cbitmapAllocMap := *(*C.ULBitmap)(unsafe.Pointer(&bitmap)), cgoAllocsUnknown
	path = safeString(path)
	cpath, cpathAllocMap := unpackPCharString(path)
	__ret := C.ulBitmapWritePNG(cbitmap, cpath)
	runtime.KeepAlive(path)
	runtime.KeepAlive(cpathAllocMap)
	runtime.KeepAlive(cbitmapAllocMap)
	__v := (bool)(__ret)
	return __v
}

// UlBitmapSwapRedBlueChannels function as declared in Ultralight/CAPI.h:1103
func UlBitmapSwapRedBlueChannels(bitmap ULBitmap) {
	cbitmap, cbitmapAllocMap := *(*C.ULBitmap)(unsafe.Pointer(&bitmap)), cgoAllocsUnknown
	C.ulBitmapSwapRedBlueChannels(cbitmap)
	runtime.KeepAlive(cbitmapAllocMap)
}

// UlCreateKeyEvent function as declared in Ultralight/CAPI.h:1112
func UlCreateKeyEvent(_type ULKeyEventType, modifiers uint32, virtual_key_code int32, native_key_code int32, text ULString, unmodified_text ULString, is_keypad bool, is_auto_repeat bool, is_system_key bool) ULKeyEvent {
	c_type, c_typeAllocMap := (C.ULKeyEventType)(_type), cgoAllocsUnknown
	cmodifiers, cmodifiersAllocMap := (C.uint)(modifiers), cgoAllocsUnknown
	cvirtual_key_code, cvirtual_key_codeAllocMap := (C.int)(virtual_key_code), cgoAllocsUnknown
	cnative_key_code, cnative_key_codeAllocMap := (C.int)(native_key_code), cgoAllocsUnknown
	ctext, ctextAllocMap := *(*C.ULString)(unsafe.Pointer(&text)), cgoAllocsUnknown
	cunmodified_text, cunmodified_textAllocMap := *(*C.ULString)(unsafe.Pointer(&unmodified_text)), cgoAllocsUnknown
	cis_keypad, cis_keypadAllocMap := (C._Bool)(is_keypad), cgoAllocsUnknown
	cis_auto_repeat, cis_auto_repeatAllocMap := (C._Bool)(is_auto_repeat), cgoAllocsUnknown
	cis_system_key, cis_system_keyAllocMap := (C._Bool)(is_system_key), cgoAllocsUnknown
	__ret := C.ulCreateKeyEvent(c_type, cmodifiers, cvirtual_key_code, cnative_key_code, ctext, cunmodified_text, cis_keypad, cis_auto_repeat, cis_system_key)
	runtime.KeepAlive(cis_system_keyAllocMap)
	runtime.KeepAlive(cis_auto_repeatAllocMap)
	runtime.KeepAlive(cis_keypadAllocMap)
	runtime.KeepAlive(cunmodified_textAllocMap)
	runtime.KeepAlive(ctextAllocMap)
	runtime.KeepAlive(cnative_key_codeAllocMap)
	runtime.KeepAlive(cvirtual_key_codeAllocMap)
	runtime.KeepAlive(cmodifiersAllocMap)
	runtime.KeepAlive(c_typeAllocMap)
	__v := *(*ULKeyEvent)(unsafe.Pointer(&__ret))
	return __v
}

// UlCreateKeyEventWindows function as declared in Ultralight/CAPI.h:1123
func UlCreateKeyEventWindows(_type ULKeyEventType, wparam uint64, lparam int64, is_system_key bool) ULKeyEvent {
	c_type, c_typeAllocMap := (C.ULKeyEventType)(_type), cgoAllocsUnknown
	cwparam, cwparamAllocMap := (C.uintptr_t)(wparam), cgoAllocsUnknown
	clparam, clparamAllocMap := (C.intptr_t)(lparam), cgoAllocsUnknown
	cis_system_key, cis_system_keyAllocMap := (C._Bool)(is_system_key), cgoAllocsUnknown
	__ret := C.ulCreateKeyEventWindows(c_type, cwparam, clparam, cis_system_key)
	runtime.KeepAlive(cis_system_keyAllocMap)
	runtime.KeepAlive(clparamAllocMap)
	runtime.KeepAlive(cwparamAllocMap)
	runtime.KeepAlive(c_typeAllocMap)
	__v := *(*ULKeyEvent)(unsafe.Pointer(&__ret))
	return __v
}

// UlDestroyKeyEvent function as declared in Ultralight/CAPI.h:1138
func UlDestroyKeyEvent(evt ULKeyEvent) {
	cevt, cevtAllocMap := *(*C.ULKeyEvent)(unsafe.Pointer(&evt)), cgoAllocsUnknown
	C.ulDestroyKeyEvent(cevt)
	runtime.KeepAlive(cevtAllocMap)
}

// UlCreateMouseEvent function as declared in Ultralight/CAPI.h:1147
func UlCreateMouseEvent(_type ULMouseEventType, x int32, y int32, button ULMouseButton) ULMouseEvent {
	c_type, c_typeAllocMap := (C.ULMouseEventType)(_type), cgoAllocsUnknown
	cx, cxAllocMap := (C.int)(x), cgoAllocsUnknown
	cy, cyAllocMap := (C.int)(y), cgoAllocsUnknown
	cbutton, cbuttonAllocMap := (C.ULMouseButton)(button), cgoAllocsUnknown
	__ret := C.ulCreateMouseEvent(c_type, cx, cy, cbutton)
	runtime.KeepAlive(cbuttonAllocMap)
	runtime.KeepAlive(cyAllocMap)
	runtime.KeepAlive(cxAllocMap)
	runtime.KeepAlive(c_typeAllocMap)
	__v := *(*ULMouseEvent)(unsafe.Pointer(&__ret))
	return __v
}

// UlDestroyMouseEvent function as declared in Ultralight/CAPI.h:1153
func UlDestroyMouseEvent(evt ULMouseEvent) {
	cevt, cevtAllocMap := *(*C.ULMouseEvent)(unsafe.Pointer(&evt)), cgoAllocsUnknown
	C.ulDestroyMouseEvent(cevt)
	runtime.KeepAlive(cevtAllocMap)
}

// UlCreateScrollEvent function as declared in Ultralight/CAPI.h:1162
func UlCreateScrollEvent(_type ULScrollEventType, delta_x int32, delta_y int32) ULScrollEvent {
	c_type, c_typeAllocMap := (C.ULScrollEventType)(_type), cgoAllocsUnknown
	cdelta_x, cdelta_xAllocMap := (C.int)(delta_x), cgoAllocsUnknown
	cdelta_y, cdelta_yAllocMap := (C.int)(delta_y), cgoAllocsUnknown
	__ret := C.ulCreateScrollEvent(c_type, cdelta_x, cdelta_y)
	runtime.KeepAlive(cdelta_yAllocMap)
	runtime.KeepAlive(cdelta_xAllocMap)
	runtime.KeepAlive(c_typeAllocMap)
	__v := *(*ULScrollEvent)(unsafe.Pointer(&__ret))
	return __v
}

// UlDestroyScrollEvent function as declared in Ultralight/CAPI.h:1168
func UlDestroyScrollEvent(evt ULScrollEvent) {
	cevt, cevtAllocMap := *(*C.ULScrollEvent)(unsafe.Pointer(&evt)), cgoAllocsUnknown
	C.ulDestroyScrollEvent(cevt)
	runtime.KeepAlive(cevtAllocMap)
}

// UlRectIsEmpty function as declared in Ultralight/CAPI.h:1177
func UlRectIsEmpty(rect ULRect) bool {
	crect, crectAllocMap := rect.PassValue()
	__ret := C.ulRectIsEmpty(crect)
	runtime.KeepAlive(crectAllocMap)
	__v := (bool)(__ret)
	return __v
}

// UlRectMakeEmpty function as declared in Ultralight/CAPI.h:1182
func UlRectMakeEmpty() ULRect {
	__ret := C.ulRectMakeEmpty()
	__v := *NewULRectRef(unsafe.Pointer(&__ret))
	return __v
}

// UlIntRectIsEmpty function as declared in Ultralight/CAPI.h:1191
func UlIntRectIsEmpty(rect ULIntRect) bool {
	crect, crectAllocMap := rect.PassValue()
	__ret := C.ulIntRectIsEmpty(crect)
	runtime.KeepAlive(crectAllocMap)
	__v := (bool)(__ret)
	return __v
}

// UlIntRectMakeEmpty function as declared in Ultralight/CAPI.h:1196
func UlIntRectMakeEmpty() ULIntRect {
	__ret := C.ulIntRectMakeEmpty()
	__v := *NewULIntRectRef(unsafe.Pointer(&__ret))
	return __v
}

// UlSurfaceGetWidth function as declared in Ultralight/CAPI.h:1205
func UlSurfaceGetWidth(surface ULSurface) uint32 {
	csurface, csurfaceAllocMap := *(*C.ULSurface)(unsafe.Pointer(&surface)), cgoAllocsUnknown
	__ret := C.ulSurfaceGetWidth(csurface)
	runtime.KeepAlive(csurfaceAllocMap)
	__v := (uint32)(__ret)
	return __v
}

// UlSurfaceGetHeight function as declared in Ultralight/CAPI.h:1210
func UlSurfaceGetHeight(surface ULSurface) uint32 {
	csurface, csurfaceAllocMap := *(*C.ULSurface)(unsafe.Pointer(&surface)), cgoAllocsUnknown
	__ret := C.ulSurfaceGetHeight(csurface)
	runtime.KeepAlive(csurfaceAllocMap)
	__v := (uint32)(__ret)
	return __v
}

// UlSurfaceGetRowBytes function as declared in Ultralight/CAPI.h:1215
func UlSurfaceGetRowBytes(surface ULSurface) uint32 {
	csurface, csurfaceAllocMap := *(*C.ULSurface)(unsafe.Pointer(&surface)), cgoAllocsUnknown
	__ret := C.ulSurfaceGetRowBytes(csurface)
	runtime.KeepAlive(csurfaceAllocMap)
	__v := (uint32)(__ret)
	return __v
}

// UlSurfaceGetSize function as declared in Ultralight/CAPI.h:1220
func UlSurfaceGetSize(surface ULSurface) uint64 {
	csurface, csurfaceAllocMap := *(*C.ULSurface)(unsafe.Pointer(&surface)), cgoAllocsUnknown
	__ret := C.ulSurfaceGetSize(csurface)
	runtime.KeepAlive(csurfaceAllocMap)
	__v := (uint64)(__ret)
	return __v
}

// UlSurfaceLockPixels function as declared in Ultralight/CAPI.h:1228
func UlSurfaceLockPixels(surface ULSurface) unsafe.Pointer {
	csurface, csurfaceAllocMap := *(*C.ULSurface)(unsafe.Pointer(&surface)), cgoAllocsUnknown
	__ret := C.ulSurfaceLockPixels(csurface)
	runtime.KeepAlive(csurfaceAllocMap)
	__v := *(*unsafe.Pointer)(unsafe.Pointer(&__ret))
	return __v
}

// UlSurfaceUnlockPixels function as declared in Ultralight/CAPI.h:1233
func UlSurfaceUnlockPixels(surface ULSurface) {
	csurface, csurfaceAllocMap := *(*C.ULSurface)(unsafe.Pointer(&surface)), cgoAllocsUnknown
	C.ulSurfaceUnlockPixels(csurface)
	runtime.KeepAlive(csurfaceAllocMap)
}

// UlSurfaceResize function as declared in Ultralight/CAPI.h:1240
func UlSurfaceResize(surface ULSurface, width uint32, height uint32) {
	csurface, csurfaceAllocMap := *(*C.ULSurface)(unsafe.Pointer(&surface)), cgoAllocsUnknown
	cwidth, cwidthAllocMap := (C.uint)(width), cgoAllocsUnknown
	cheight, cheightAllocMap := (C.uint)(height), cgoAllocsUnknown
	C.ulSurfaceResize(csurface, cwidth, cheight)
	runtime.KeepAlive(cheightAllocMap)
	runtime.KeepAlive(cwidthAllocMap)
	runtime.KeepAlive(csurfaceAllocMap)
}

// UlSurfaceSetDirtyBounds function as declared in Ultralight/CAPI.h:1248
func UlSurfaceSetDirtyBounds(surface ULSurface, bounds ULIntRect) {
	csurface, csurfaceAllocMap := *(*C.ULSurface)(unsafe.Pointer(&surface)), cgoAllocsUnknown
	cbounds, cboundsAllocMap := bounds.PassValue()
	C.ulSurfaceSetDirtyBounds(csurface, cbounds)
	runtime.KeepAlive(cboundsAllocMap)
	runtime.KeepAlive(csurfaceAllocMap)
}

// UlSurfaceGetDirtyBounds function as declared in Ultralight/CAPI.h:1268
func UlSurfaceGetDirtyBounds(surface ULSurface) ULIntRect {
	csurface, csurfaceAllocMap := *(*C.ULSurface)(unsafe.Pointer(&surface)), cgoAllocsUnknown
	__ret := C.ulSurfaceGetDirtyBounds(csurface)
	runtime.KeepAlive(csurfaceAllocMap)
	__v := *NewULIntRectRef(unsafe.Pointer(&__ret))
	return __v
}

// UlSurfaceClearDirtyBounds function as declared in Ultralight/CAPI.h:1275
func UlSurfaceClearDirtyBounds(surface ULSurface) {
	csurface, csurfaceAllocMap := *(*C.ULSurface)(unsafe.Pointer(&surface)), cgoAllocsUnknown
	C.ulSurfaceClearDirtyBounds(csurface)
	runtime.KeepAlive(csurfaceAllocMap)
}

// UlSurfaceGetUserData function as declared in Ultralight/CAPI.h:1283
func UlSurfaceGetUserData(surface ULSurface) unsafe.Pointer {
	csurface, csurfaceAllocMap := *(*C.ULSurface)(unsafe.Pointer(&surface)), cgoAllocsUnknown
	__ret := C.ulSurfaceGetUserData(csurface)
	runtime.KeepAlive(csurfaceAllocMap)
	__v := *(*unsafe.Pointer)(unsafe.Pointer(&__ret))
	return __v
}

// UlBitmapSurfaceGetBitmap function as declared in Ultralight/CAPI.h:1295
func UlBitmapSurfaceGetBitmap(surface ULBitmapSurface) ULBitmap {
	csurface, csurfaceAllocMap := *(*C.ULBitmapSurface)(unsafe.Pointer(&surface)), cgoAllocsUnknown
	__ret := C.ulBitmapSurfaceGetBitmap(csurface)
	runtime.KeepAlive(csurfaceAllocMap)
	__v := *(*ULBitmap)(unsafe.Pointer(&__ret))
	return __v
}

// UlApplyProjection function as declared in Ultralight/CAPI.h:1816
func UlApplyProjection(transform ULMatrix4x4, viewport_width float32, viewport_height float32, flip_y bool) ULMatrix4x4 {
	ctransform, ctransformAllocMap := transform.PassValue()
	cviewport_width, cviewport_widthAllocMap := (C.float)(viewport_width), cgoAllocsUnknown
	cviewport_height, cviewport_heightAllocMap := (C.float)(viewport_height), cgoAllocsUnknown
	cflip_y, cflip_yAllocMap := (C._Bool)(flip_y), cgoAllocsUnknown
	__ret := C.ulApplyProjection(ctransform, cviewport_width, cviewport_height, cflip_y)
	runtime.KeepAlive(cflip_yAllocMap)
	runtime.KeepAlive(cviewport_heightAllocMap)
	runtime.KeepAlive(cviewport_widthAllocMap)
	runtime.KeepAlive(ctransformAllocMap)
	__v := *NewULMatrix4x4Ref(unsafe.Pointer(&__ret))
	return __v
}

// UlPlatformSetLogger function as declared in Ultralight/CAPI.h:1871
func UlPlatformSetLogger(logger ULLogger) {
	clogger, cloggerAllocMap := logger.PassValue()
	C.ulPlatformSetLogger(clogger)
	runtime.KeepAlive(cloggerAllocMap)
}

// UlPlatformSetFileSystem function as declared in Ultralight/CAPI.h:1889
func UlPlatformSetFileSystem(file_system ULFileSystem) {
	cfile_system, cfile_systemAllocMap := file_system.PassValue()
	C.ulPlatformSetFileSystem(cfile_system)
	runtime.KeepAlive(cfile_systemAllocMap)
}

// UlPlatformSetSurfaceDefinition function as declared in Ultralight/CAPI.h:1902
func UlPlatformSetSurfaceDefinition(surface_definition ULSurfaceDefinition) {
	csurface_definition, csurface_definitionAllocMap := surface_definition.PassValue()
	C.ulPlatformSetSurfaceDefinition(csurface_definition)
	runtime.KeepAlive(csurface_definitionAllocMap)
}

// UlPlatformSetGPUDriver function as declared in Ultralight/CAPI.h:1917
func UlPlatformSetGPUDriver(gpu_driver ULGPUDriver) {
	cgpu_driver, cgpu_driverAllocMap := gpu_driver.PassValue()
	C.ulPlatformSetGPUDriver(cgpu_driver)
	runtime.KeepAlive(cgpu_driverAllocMap)
}

// UlPlatformSetClipboard function as declared in Ultralight/CAPI.h:1930
func UlPlatformSetClipboard(clipboard ULClipboard) {
	cclipboard, cclipboardAllocMap := clipboard.PassValue()
	C.ulPlatformSetClipboard(cclipboard)
	runtime.KeepAlive(cclipboardAllocMap)
}

// JSEvaluateScript function as declared in JavaScriptCore/JSBase.h:113
func JSEvaluateScript(ctx JSContextRef, script JSStringRef, thisObject JSObjectRef, sourceURL JSStringRef, startingLineNumber int32, exception []JSValueRef) JSValueRef {
	cctx, cctxAllocMap := *(*C.JSContextRef)(unsafe.Pointer(&ctx)), cgoAllocsUnknown
	cscript, cscriptAllocMap := *(*C.JSStringRef)(unsafe.Pointer(&script)), cgoAllocsUnknown
	cthisObject, cthisObjectAllocMap := *(*C.JSObjectRef)(unsafe.Pointer(&thisObject)), cgoAllocsUnknown
	csourceURL, csourceURLAllocMap := *(*C.JSStringRef)(unsafe.Pointer(&sourceURL)), cgoAllocsUnknown
	cstartingLineNumber, cstartingLineNumberAllocMap := (C.int)(startingLineNumber), cgoAllocsUnknown
	cexception, cexceptionAllocMap := copyPJSValueRefBytes((*sliceHeader)(unsafe.Pointer(&exception)))
	__ret := C.JSEvaluateScript(cctx, cscript, cthisObject, csourceURL, cstartingLineNumber, cexception)
	runtime.KeepAlive(cexceptionAllocMap)
	runtime.KeepAlive(cstartingLineNumberAllocMap)
	runtime.KeepAlive(csourceURLAllocMap)
	runtime.KeepAlive(cthisObjectAllocMap)
	runtime.KeepAlive(cscriptAllocMap)
	runtime.KeepAlive(cctxAllocMap)
	__v := *(*JSValueRef)(unsafe.Pointer(&__ret))
	return __v
}

// JSCheckScriptSyntax function as declared in JavaScriptCore/JSBase.h:125
func JSCheckScriptSyntax(ctx JSContextRef, script JSStringRef, sourceURL JSStringRef, startingLineNumber int32, exception []JSValueRef) bool {
	cctx, cctxAllocMap := *(*C.JSContextRef)(unsafe.Pointer(&ctx)), cgoAllocsUnknown
	cscript, cscriptAllocMap := *(*C.JSStringRef)(unsafe.Pointer(&script)), cgoAllocsUnknown
	csourceURL, csourceURLAllocMap := *(*C.JSStringRef)(unsafe.Pointer(&sourceURL)), cgoAllocsUnknown
	cstartingLineNumber, cstartingLineNumberAllocMap := (C.int)(startingLineNumber), cgoAllocsUnknown
	cexception, cexceptionAllocMap := copyPJSValueRefBytes((*sliceHeader)(unsafe.Pointer(&exception)))
	__ret := C.JSCheckScriptSyntax(cctx, cscript, csourceURL, cstartingLineNumber, cexception)
	runtime.KeepAlive(cexceptionAllocMap)
	runtime.KeepAlive(cstartingLineNumberAllocMap)
	runtime.KeepAlive(csourceURLAllocMap)
	runtime.KeepAlive(cscriptAllocMap)
	runtime.KeepAlive(cctxAllocMap)
	__v := (bool)(__ret)
	return __v
}

// JSGarbageCollect function as declared in JavaScriptCore/JSBase.h:140
func JSGarbageCollect(ctx JSContextRef) {
	cctx, cctxAllocMap := *(*C.JSContextRef)(unsafe.Pointer(&ctx)), cgoAllocsUnknown
	C.JSGarbageCollect(cctx)
	runtime.KeepAlive(cctxAllocMap)
}

// JSContextGroupCreate function as declared in JavaScriptCore/JSContextRef.h:56
func JSContextGroupCreate() JSContextGroupRef {
	__ret := C.JSContextGroupCreate()
	__v := *(*JSContextGroupRef)(unsafe.Pointer(&__ret))
	return __v
}

// JSContextGroupRetain function as declared in JavaScriptCore/JSContextRef.h:64
func JSContextGroupRetain(group JSContextGroupRef) JSContextGroupRef {
	cgroup, cgroupAllocMap := *(*C.JSContextGroupRef)(unsafe.Pointer(&group)), cgoAllocsUnknown
	__ret := C.JSContextGroupRetain(cgroup)
	runtime.KeepAlive(cgroupAllocMap)
	__v := *(*JSContextGroupRef)(unsafe.Pointer(&__ret))
	return __v
}

// JSContextGroupRelease function as declared in JavaScriptCore/JSContextRef.h:71
func JSContextGroupRelease(group JSContextGroupRef) {
	cgroup, cgroupAllocMap := *(*C.JSContextGroupRef)(unsafe.Pointer(&group)), cgoAllocsUnknown
	C.JSContextGroupRelease(cgroup)
	runtime.KeepAlive(cgroupAllocMap)
}

// JSGlobalContextCreate function as declared in JavaScriptCore/JSContextRef.h:86
func JSGlobalContextCreate(globalObjectClass JSClassRef) JSGlobalContextRef {
	cglobalObjectClass, cglobalObjectClassAllocMap := *(*C.JSClassRef)(unsafe.Pointer(&globalObjectClass)), cgoAllocsUnknown
	__ret := C.JSGlobalContextCreate(cglobalObjectClass)
	runtime.KeepAlive(cglobalObjectClassAllocMap)
	__v := *(*JSGlobalContextRef)(unsafe.Pointer(&__ret))
	return __v
}

// JSGlobalContextCreateInGroup function as declared in JavaScriptCore/JSContextRef.h:100
func JSGlobalContextCreateInGroup(group JSContextGroupRef, globalObjectClass JSClassRef) JSGlobalContextRef {
	cgroup, cgroupAllocMap := *(*C.JSContextGroupRef)(unsafe.Pointer(&group)), cgoAllocsUnknown
	cglobalObjectClass, cglobalObjectClassAllocMap := *(*C.JSClassRef)(unsafe.Pointer(&globalObjectClass)), cgoAllocsUnknown
	__ret := C.JSGlobalContextCreateInGroup(cgroup, cglobalObjectClass)
	runtime.KeepAlive(cglobalObjectClassAllocMap)
	runtime.KeepAlive(cgroupAllocMap)
	__v := *(*JSGlobalContextRef)(unsafe.Pointer(&__ret))
	return __v
}

// JSGlobalContextRetain function as declared in JavaScriptCore/JSContextRef.h:108
func JSGlobalContextRetain(ctx JSGlobalContextRef) JSGlobalContextRef {
	cctx, cctxAllocMap := *(*C.JSGlobalContextRef)(unsafe.Pointer(&ctx)), cgoAllocsUnknown
	__ret := C.JSGlobalContextRetain(cctx)
	runtime.KeepAlive(cctxAllocMap)
	__v := *(*JSGlobalContextRef)(unsafe.Pointer(&__ret))
	return __v
}

// JSGlobalContextRelease function as declared in JavaScriptCore/JSContextRef.h:115
func JSGlobalContextRelease(ctx JSGlobalContextRef) {
	cctx, cctxAllocMap := *(*C.JSGlobalContextRef)(unsafe.Pointer(&ctx)), cgoAllocsUnknown
	C.JSGlobalContextRelease(cctx)
	runtime.KeepAlive(cctxAllocMap)
}

// JSContextGetGlobalObject function as declared in JavaScriptCore/JSContextRef.h:123
func JSContextGetGlobalObject(ctx JSContextRef) JSObjectRef {
	cctx, cctxAllocMap := *(*C.JSContextRef)(unsafe.Pointer(&ctx)), cgoAllocsUnknown
	__ret := C.JSContextGetGlobalObject(cctx)
	runtime.KeepAlive(cctxAllocMap)
	__v := *(*JSObjectRef)(unsafe.Pointer(&__ret))
	return __v
}

// JSContextGetGroup function as declared in JavaScriptCore/JSContextRef.h:131
func JSContextGetGroup(ctx JSContextRef) JSContextGroupRef {
	cctx, cctxAllocMap := *(*C.JSContextRef)(unsafe.Pointer(&ctx)), cgoAllocsUnknown
	__ret := C.JSContextGetGroup(cctx)
	runtime.KeepAlive(cctxAllocMap)
	__v := *(*JSContextGroupRef)(unsafe.Pointer(&__ret))
	return __v
}

// JSContextGetGlobalContext function as declared in JavaScriptCore/JSContextRef.h:139
func JSContextGetGlobalContext(ctx JSContextRef) JSGlobalContextRef {
	cctx, cctxAllocMap := *(*C.JSContextRef)(unsafe.Pointer(&ctx)), cgoAllocsUnknown
	__ret := C.JSContextGetGlobalContext(cctx)
	runtime.KeepAlive(cctxAllocMap)
	__v := *(*JSGlobalContextRef)(unsafe.Pointer(&__ret))
	return __v
}

// JSGlobalContextCopyName function as declared in JavaScriptCore/JSContextRef.h:149
func JSGlobalContextCopyName(ctx JSGlobalContextRef) JSStringRef {
	cctx, cctxAllocMap := *(*C.JSGlobalContextRef)(unsafe.Pointer(&ctx)), cgoAllocsUnknown
	__ret := C.JSGlobalContextCopyName(cctx)
	runtime.KeepAlive(cctxAllocMap)
	__v := *(*JSStringRef)(unsafe.Pointer(&__ret))
	return __v
}

// JSGlobalContextSetName function as declared in JavaScriptCore/JSContextRef.h:157
func JSGlobalContextSetName(ctx JSGlobalContextRef, name JSStringRef) {
	cctx, cctxAllocMap := *(*C.JSGlobalContextRef)(unsafe.Pointer(&ctx)), cgoAllocsUnknown
	cname, cnameAllocMap := *(*C.JSStringRef)(unsafe.Pointer(&name)), cgoAllocsUnknown
	C.JSGlobalContextSetName(cctx, cname)
	runtime.KeepAlive(cnameAllocMap)
	runtime.KeepAlive(cctxAllocMap)
}

var KJSClassDefinitionEmpty JSClassDefinition

// JSClassCreate function as declared in JavaScriptCore/JSObjectRef.h:466
func JSClassCreate(definition []JSClassDefinition) JSClassRef {
	cdefinition, cdefinitionAllocMap := unpackArgSJSClassDefinition(definition)
	__ret := C.JSClassCreate(cdefinition)
	packSJSClassDefinition(definition, cdefinition)
	runtime.KeepAlive(cdefinitionAllocMap)
	__v := *(*JSClassRef)(unsafe.Pointer(&__ret))
	return __v
}

// JSClassRetain function as declared in JavaScriptCore/JSObjectRef.h:474
func JSClassRetain(jsClass JSClassRef) JSClassRef {
	cjsClass, cjsClassAllocMap := *(*C.JSClassRef)(unsafe.Pointer(&jsClass)), cgoAllocsUnknown
	__ret := C.JSClassRetain(cjsClass)
	runtime.KeepAlive(cjsClassAllocMap)
	__v := *(*JSClassRef)(unsafe.Pointer(&__ret))
	return __v
}

// JSClassRelease function as declared in JavaScriptCore/JSObjectRef.h:481
func JSClassRelease(jsClass JSClassRef) {
	cjsClass, cjsClassAllocMap := *(*C.JSClassRef)(unsafe.Pointer(&jsClass)), cgoAllocsUnknown
	C.JSClassRelease(cjsClass)
	runtime.KeepAlive(cjsClassAllocMap)
}

// JSClassGetPrivate function as declared in JavaScriptCore/JSObjectRef.h:490
func JSClassGetPrivate(jsClass JSClassRef) unsafe.Pointer {
	cjsClass, cjsClassAllocMap := *(*C.JSClassRef)(unsafe.Pointer(&jsClass)), cgoAllocsUnknown
	__ret := C.JSClassGetPrivate(cjsClass)
	runtime.KeepAlive(cjsClassAllocMap)
	__v := *(*unsafe.Pointer)(unsafe.Pointer(&__ret))
	return __v
}

// JSClassSetPrivate function as declared in JavaScriptCore/JSObjectRef.h:500
func JSClassSetPrivate(jsClass JSClassRef, data unsafe.Pointer) bool {
	cjsClass, cjsClassAllocMap := *(*C.JSClassRef)(unsafe.Pointer(&jsClass)), cgoAllocsUnknown
	cdata, cdataAllocMap := data, cgoAllocsUnknown
	__ret := C.JSClassSetPrivate(cjsClass, cdata)
	runtime.KeepAlive(cdataAllocMap)
	runtime.KeepAlive(cjsClassAllocMap)
	__v := (bool)(__ret)
	return __v
}

// JSObjectMake function as declared in JavaScriptCore/JSObjectRef.h:513
func JSObjectMake(ctx JSContextRef, jsClass JSClassRef, data unsafe.Pointer) JSObjectRef {
	cctx, cctxAllocMap := *(*C.JSContextRef)(unsafe.Pointer(&ctx)), cgoAllocsUnknown
	cjsClass, cjsClassAllocMap := *(*C.JSClassRef)(unsafe.Pointer(&jsClass)), cgoAllocsUnknown
	cdata, cdataAllocMap := data, cgoAllocsUnknown
	__ret := C.JSObjectMake(cctx, cjsClass, cdata)
	runtime.KeepAlive(cdataAllocMap)
	runtime.KeepAlive(cjsClassAllocMap)
	runtime.KeepAlive(cctxAllocMap)
	__v := *(*JSObjectRef)(unsafe.Pointer(&__ret))
	return __v
}

// JSObjectMakeFunctionWithCallback function as declared in JavaScriptCore/JSObjectRef.h:523
func JSObjectMakeFunctionWithCallback(ctx JSContextRef, name JSStringRef, callAsFunction JSObjectCallAsFunctionCallback) JSObjectRef {
	cctx, cctxAllocMap := *(*C.JSContextRef)(unsafe.Pointer(&ctx)), cgoAllocsUnknown
	cname, cnameAllocMap := *(*C.JSStringRef)(unsafe.Pointer(&name)), cgoAllocsUnknown
	ccallAsFunction, ccallAsFunctionAllocMap := callAsFunction.PassValue()
	__ret := C.JSObjectMakeFunctionWithCallback(cctx, cname, ccallAsFunction)
	runtime.KeepAlive(ccallAsFunctionAllocMap)
	runtime.KeepAlive(cnameAllocMap)
	runtime.KeepAlive(cctxAllocMap)
	__v := *(*JSObjectRef)(unsafe.Pointer(&__ret))
	return __v
}

// JSObjectMakeConstructor function as declared in JavaScriptCore/JSObjectRef.h:534
func JSObjectMakeConstructor(ctx JSContextRef, jsClass JSClassRef, callAsConstructor JSObjectCallAsConstructorCallback) JSObjectRef {
	cctx, cctxAllocMap := *(*C.JSContextRef)(unsafe.Pointer(&ctx)), cgoAllocsUnknown
	cjsClass, cjsClassAllocMap := *(*C.JSClassRef)(unsafe.Pointer(&jsClass)), cgoAllocsUnknown
	ccallAsConstructor, ccallAsConstructorAllocMap := callAsConstructor.PassValue()
	__ret := C.JSObjectMakeConstructor(cctx, cjsClass, ccallAsConstructor)
	runtime.KeepAlive(ccallAsConstructorAllocMap)
	runtime.KeepAlive(cjsClassAllocMap)
	runtime.KeepAlive(cctxAllocMap)
	__v := *(*JSObjectRef)(unsafe.Pointer(&__ret))
	return __v
}

// JSObjectMakeArray function as declared in JavaScriptCore/JSObjectRef.h:547
func JSObjectMakeArray(ctx JSContextRef, argumentCount uint64, arguments []JSValueRef, exception []JSValueRef) JSObjectRef {
	cctx, cctxAllocMap := *(*C.JSContextRef)(unsafe.Pointer(&ctx)), cgoAllocsUnknown
	cargumentCount, cargumentCountAllocMap := (C.size_t)(argumentCount), cgoAllocsUnknown
	carguments, cargumentsAllocMap := copyPJSValueRefBytes((*sliceHeader)(unsafe.Pointer(&arguments)))
	cexception, cexceptionAllocMap := copyPJSValueRefBytes((*sliceHeader)(unsafe.Pointer(&exception)))
	__ret := C.JSObjectMakeArray(cctx, cargumentCount, carguments, cexception)
	runtime.KeepAlive(cexceptionAllocMap)
	runtime.KeepAlive(cargumentsAllocMap)
	runtime.KeepAlive(cargumentCountAllocMap)
	runtime.KeepAlive(cctxAllocMap)
	__v := *(*JSObjectRef)(unsafe.Pointer(&__ret))
	return __v
}

// JSObjectMakeDate function as declared in JavaScriptCore/JSObjectRef.h:558
func JSObjectMakeDate(ctx JSContextRef, argumentCount uint64, arguments []JSValueRef, exception []JSValueRef) JSObjectRef {
	cctx, cctxAllocMap := *(*C.JSContextRef)(unsafe.Pointer(&ctx)), cgoAllocsUnknown
	cargumentCount, cargumentCountAllocMap := (C.size_t)(argumentCount), cgoAllocsUnknown
	carguments, cargumentsAllocMap := copyPJSValueRefBytes((*sliceHeader)(unsafe.Pointer(&arguments)))
	cexception, cexceptionAllocMap := copyPJSValueRefBytes((*sliceHeader)(unsafe.Pointer(&exception)))
	__ret := C.JSObjectMakeDate(cctx, cargumentCount, carguments, cexception)
	runtime.KeepAlive(cexceptionAllocMap)
	runtime.KeepAlive(cargumentsAllocMap)
	runtime.KeepAlive(cargumentCountAllocMap)
	runtime.KeepAlive(cctxAllocMap)
	__v := *(*JSObjectRef)(unsafe.Pointer(&__ret))
	return __v
}

// JSObjectMakeError function as declared in JavaScriptCore/JSObjectRef.h:569
func JSObjectMakeError(ctx JSContextRef, argumentCount uint64, arguments []JSValueRef, exception []JSValueRef) JSObjectRef {
	cctx, cctxAllocMap := *(*C.JSContextRef)(unsafe.Pointer(&ctx)), cgoAllocsUnknown
	cargumentCount, cargumentCountAllocMap := (C.size_t)(argumentCount), cgoAllocsUnknown
	carguments, cargumentsAllocMap := copyPJSValueRefBytes((*sliceHeader)(unsafe.Pointer(&arguments)))
	cexception, cexceptionAllocMap := copyPJSValueRefBytes((*sliceHeader)(unsafe.Pointer(&exception)))
	__ret := C.JSObjectMakeError(cctx, cargumentCount, carguments, cexception)
	runtime.KeepAlive(cexceptionAllocMap)
	runtime.KeepAlive(cargumentsAllocMap)
	runtime.KeepAlive(cargumentCountAllocMap)
	runtime.KeepAlive(cctxAllocMap)
	__v := *(*JSObjectRef)(unsafe.Pointer(&__ret))
	return __v
}

// JSObjectMakeRegExp function as declared in JavaScriptCore/JSObjectRef.h:580
func JSObjectMakeRegExp(ctx JSContextRef, argumentCount uint64, arguments []JSValueRef, exception []JSValueRef) JSObjectRef {
	cctx, cctxAllocMap := *(*C.JSContextRef)(unsafe.Pointer(&ctx)), cgoAllocsUnknown
	cargumentCount, cargumentCountAllocMap := (C.size_t)(argumentCount), cgoAllocsUnknown
	carguments, cargumentsAllocMap := copyPJSValueRefBytes((*sliceHeader)(unsafe.Pointer(&arguments)))
	cexception, cexceptionAllocMap := copyPJSValueRefBytes((*sliceHeader)(unsafe.Pointer(&exception)))
	__ret := C.JSObjectMakeRegExp(cctx, cargumentCount, carguments, cexception)
	runtime.KeepAlive(cexceptionAllocMap)
	runtime.KeepAlive(cargumentsAllocMap)
	runtime.KeepAlive(cargumentCountAllocMap)
	runtime.KeepAlive(cctxAllocMap)
	__v := *(*JSObjectRef)(unsafe.Pointer(&__ret))
	return __v
}

// JSObjectMakeDeferredPromise function as declared in JavaScriptCore/JSObjectRef.h:591
func JSObjectMakeDeferredPromise(ctx JSContextRef, resolve []JSObjectRef, reject []JSObjectRef, exception []JSValueRef) JSObjectRef {
	cctx, cctxAllocMap := *(*C.JSContextRef)(unsafe.Pointer(&ctx)), cgoAllocsUnknown
	cresolve, cresolveAllocMap := copyPJSObjectRefBytes((*sliceHeader)(unsafe.Pointer(&resolve)))
	creject, crejectAllocMap := copyPJSObjectRefBytes((*sliceHeader)(unsafe.Pointer(&reject)))
	cexception, cexceptionAllocMap := copyPJSValueRefBytes((*sliceHeader)(unsafe.Pointer(&exception)))
	__ret := C.JSObjectMakeDeferredPromise(cctx, cresolve, creject, cexception)
	runtime.KeepAlive(cexceptionAllocMap)
	runtime.KeepAlive(crejectAllocMap)
	runtime.KeepAlive(cresolveAllocMap)
	runtime.KeepAlive(cctxAllocMap)
	__v := *(*JSObjectRef)(unsafe.Pointer(&__ret))
	return __v
}

// JSObjectMakeFunction function as declared in JavaScriptCore/JSObjectRef.h:607
func JSObjectMakeFunction(ctx JSContextRef, name JSStringRef, parameterCount uint32, parameterNames []JSStringRef, body JSStringRef, sourceURL JSStringRef, startingLineNumber int32, exception []JSValueRef) JSObjectRef {
	cctx, cctxAllocMap := *(*C.JSContextRef)(unsafe.Pointer(&ctx)), cgoAllocsUnknown
	cname, cnameAllocMap := *(*C.JSStringRef)(unsafe.Pointer(&name)), cgoAllocsUnknown
	cparameterCount, cparameterCountAllocMap := (C.uint)(parameterCount), cgoAllocsUnknown
	cparameterNames, cparameterNamesAllocMap := copyPJSStringRefBytes((*sliceHeader)(unsafe.Pointer(&parameterNames)))
	cbody, cbodyAllocMap := *(*C.JSStringRef)(unsafe.Pointer(&body)), cgoAllocsUnknown
	csourceURL, csourceURLAllocMap := *(*C.JSStringRef)(unsafe.Pointer(&sourceURL)), cgoAllocsUnknown
	cstartingLineNumber, cstartingLineNumberAllocMap := (C.int)(startingLineNumber), cgoAllocsUnknown
	cexception, cexceptionAllocMap := copyPJSValueRefBytes((*sliceHeader)(unsafe.Pointer(&exception)))
	__ret := C.JSObjectMakeFunction(cctx, cname, cparameterCount, cparameterNames, cbody, csourceURL, cstartingLineNumber, cexception)
	runtime.KeepAlive(cexceptionAllocMap)
	runtime.KeepAlive(cstartingLineNumberAllocMap)
	runtime.KeepAlive(csourceURLAllocMap)
	runtime.KeepAlive(cbodyAllocMap)
	runtime.KeepAlive(cparameterNamesAllocMap)
	runtime.KeepAlive(cparameterCountAllocMap)
	runtime.KeepAlive(cnameAllocMap)
	runtime.KeepAlive(cctxAllocMap)
	__v := *(*JSObjectRef)(unsafe.Pointer(&__ret))
	return __v
}

// JSObjectGetPrototype function as declared in JavaScriptCore/JSObjectRef.h:616
func JSObjectGetPrototype(ctx JSContextRef, object JSObjectRef) JSValueRef {
	cctx, cctxAllocMap := *(*C.JSContextRef)(unsafe.Pointer(&ctx)), cgoAllocsUnknown
	cobject, cobjectAllocMap := *(*C.JSObjectRef)(unsafe.Pointer(&object)), cgoAllocsUnknown
	__ret := C.JSObjectGetPrototype(cctx, cobject)
	runtime.KeepAlive(cobjectAllocMap)
	runtime.KeepAlive(cctxAllocMap)
	__v := *(*JSValueRef)(unsafe.Pointer(&__ret))
	return __v
}

// JSObjectSetPrototype function as declared in JavaScriptCore/JSObjectRef.h:625
func JSObjectSetPrototype(ctx JSContextRef, object JSObjectRef, value JSValueRef) {
	cctx, cctxAllocMap := *(*C.JSContextRef)(unsafe.Pointer(&ctx)), cgoAllocsUnknown
	cobject, cobjectAllocMap := *(*C.JSObjectRef)(unsafe.Pointer(&object)), cgoAllocsUnknown
	cvalue, cvalueAllocMap := *(*C.JSValueRef)(unsafe.Pointer(&value)), cgoAllocsUnknown
	C.JSObjectSetPrototype(cctx, cobject, cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	runtime.KeepAlive(cobjectAllocMap)
	runtime.KeepAlive(cctxAllocMap)
}

// JSObjectHasProperty function as declared in JavaScriptCore/JSObjectRef.h:634
func JSObjectHasProperty(ctx JSContextRef, object JSObjectRef, propertyName JSStringRef) bool {
	cctx, cctxAllocMap := *(*C.JSContextRef)(unsafe.Pointer(&ctx)), cgoAllocsUnknown
	cobject, cobjectAllocMap := *(*C.JSObjectRef)(unsafe.Pointer(&object)), cgoAllocsUnknown
	cpropertyName, cpropertyNameAllocMap := *(*C.JSStringRef)(unsafe.Pointer(&propertyName)), cgoAllocsUnknown
	__ret := C.JSObjectHasProperty(cctx, cobject, cpropertyName)
	runtime.KeepAlive(cpropertyNameAllocMap)
	runtime.KeepAlive(cobjectAllocMap)
	runtime.KeepAlive(cctxAllocMap)
	__v := (bool)(__ret)
	return __v
}

// JSObjectGetProperty function as declared in JavaScriptCore/JSObjectRef.h:645
func JSObjectGetProperty(ctx JSContextRef, object JSObjectRef, propertyName JSStringRef, exception []JSValueRef) JSValueRef {
	cctx, cctxAllocMap := *(*C.JSContextRef)(unsafe.Pointer(&ctx)), cgoAllocsUnknown
	cobject, cobjectAllocMap := *(*C.JSObjectRef)(unsafe.Pointer(&object)), cgoAllocsUnknown
	cpropertyName, cpropertyNameAllocMap := *(*C.JSStringRef)(unsafe.Pointer(&propertyName)), cgoAllocsUnknown
	cexception, cexceptionAllocMap := copyPJSValueRefBytes((*sliceHeader)(unsafe.Pointer(&exception)))
	__ret := C.JSObjectGetProperty(cctx, cobject, cpropertyName, cexception)
	runtime.KeepAlive(cexceptionAllocMap)
	runtime.KeepAlive(cpropertyNameAllocMap)
	runtime.KeepAlive(cobjectAllocMap)
	runtime.KeepAlive(cctxAllocMap)
	__v := *(*JSValueRef)(unsafe.Pointer(&__ret))
	return __v
}

// JSObjectSetProperty function as declared in JavaScriptCore/JSObjectRef.h:657
func JSObjectSetProperty(ctx JSContextRef, object JSObjectRef, propertyName JSStringRef, value JSValueRef, attributes JSPropertyAttributes, exception []JSValueRef) {
	cctx, cctxAllocMap := *(*C.JSContextRef)(unsafe.Pointer(&ctx)), cgoAllocsUnknown
	cobject, cobjectAllocMap := *(*C.JSObjectRef)(unsafe.Pointer(&object)), cgoAllocsUnknown
	cpropertyName, cpropertyNameAllocMap := *(*C.JSStringRef)(unsafe.Pointer(&propertyName)), cgoAllocsUnknown
	cvalue, cvalueAllocMap := *(*C.JSValueRef)(unsafe.Pointer(&value)), cgoAllocsUnknown
	cattributes, cattributesAllocMap := (C.JSPropertyAttributes)(attributes), cgoAllocsUnknown
	cexception, cexceptionAllocMap := copyPJSValueRefBytes((*sliceHeader)(unsafe.Pointer(&exception)))
	C.JSObjectSetProperty(cctx, cobject, cpropertyName, cvalue, cattributes, cexception)
	runtime.KeepAlive(cexceptionAllocMap)
	runtime.KeepAlive(cattributesAllocMap)
	runtime.KeepAlive(cvalueAllocMap)
	runtime.KeepAlive(cpropertyNameAllocMap)
	runtime.KeepAlive(cobjectAllocMap)
	runtime.KeepAlive(cctxAllocMap)
}

// JSObjectDeleteProperty function as declared in JavaScriptCore/JSObjectRef.h:668
func JSObjectDeleteProperty(ctx JSContextRef, object JSObjectRef, propertyName JSStringRef, exception []JSValueRef) bool {
	cctx, cctxAllocMap := *(*C.JSContextRef)(unsafe.Pointer(&ctx)), cgoAllocsUnknown
	cobject, cobjectAllocMap := *(*C.JSObjectRef)(unsafe.Pointer(&object)), cgoAllocsUnknown
	cpropertyName, cpropertyNameAllocMap := *(*C.JSStringRef)(unsafe.Pointer(&propertyName)), cgoAllocsUnknown
	cexception, cexceptionAllocMap := copyPJSValueRefBytes((*sliceHeader)(unsafe.Pointer(&exception)))
	__ret := C.JSObjectDeleteProperty(cctx, cobject, cpropertyName, cexception)
	runtime.KeepAlive(cexceptionAllocMap)
	runtime.KeepAlive(cpropertyNameAllocMap)
	runtime.KeepAlive(cobjectAllocMap)
	runtime.KeepAlive(cctxAllocMap)
	__v := (bool)(__ret)
	return __v
}

// JSObjectHasPropertyForKey function as declared in JavaScriptCore/JSObjectRef.h:679
func JSObjectHasPropertyForKey(ctx JSContextRef, object JSObjectRef, propertyKey JSValueRef, exception []JSValueRef) bool {
	cctx, cctxAllocMap := *(*C.JSContextRef)(unsafe.Pointer(&ctx)), cgoAllocsUnknown
	cobject, cobjectAllocMap := *(*C.JSObjectRef)(unsafe.Pointer(&object)), cgoAllocsUnknown
	cpropertyKey, cpropertyKeyAllocMap := *(*C.JSValueRef)(unsafe.Pointer(&propertyKey)), cgoAllocsUnknown
	cexception, cexceptionAllocMap := copyPJSValueRefBytes((*sliceHeader)(unsafe.Pointer(&exception)))
	__ret := C.JSObjectHasPropertyForKey(cctx, cobject, cpropertyKey, cexception)
	runtime.KeepAlive(cexceptionAllocMap)
	runtime.KeepAlive(cpropertyKeyAllocMap)
	runtime.KeepAlive(cobjectAllocMap)
	runtime.KeepAlive(cctxAllocMap)
	__v := (bool)(__ret)
	return __v
}

// JSObjectGetPropertyForKey function as declared in JavaScriptCore/JSObjectRef.h:691
func JSObjectGetPropertyForKey(ctx JSContextRef, object JSObjectRef, propertyKey JSValueRef, exception []JSValueRef) JSValueRef {
	cctx, cctxAllocMap := *(*C.JSContextRef)(unsafe.Pointer(&ctx)), cgoAllocsUnknown
	cobject, cobjectAllocMap := *(*C.JSObjectRef)(unsafe.Pointer(&object)), cgoAllocsUnknown
	cpropertyKey, cpropertyKeyAllocMap := *(*C.JSValueRef)(unsafe.Pointer(&propertyKey)), cgoAllocsUnknown
	cexception, cexceptionAllocMap := copyPJSValueRefBytes((*sliceHeader)(unsafe.Pointer(&exception)))
	__ret := C.JSObjectGetPropertyForKey(cctx, cobject, cpropertyKey, cexception)
	runtime.KeepAlive(cexceptionAllocMap)
	runtime.KeepAlive(cpropertyKeyAllocMap)
	runtime.KeepAlive(cobjectAllocMap)
	runtime.KeepAlive(cctxAllocMap)
	__v := *(*JSValueRef)(unsafe.Pointer(&__ret))
	return __v
}

// JSObjectSetPropertyForKey function as declared in JavaScriptCore/JSObjectRef.h:704
func JSObjectSetPropertyForKey(ctx JSContextRef, object JSObjectRef, propertyKey JSValueRef, value JSValueRef, attributes JSPropertyAttributes, exception []JSValueRef) {
	cctx, cctxAllocMap := *(*C.JSContextRef)(unsafe.Pointer(&ctx)), cgoAllocsUnknown
	cobject, cobjectAllocMap := *(*C.JSObjectRef)(unsafe.Pointer(&object)), cgoAllocsUnknown
	cpropertyKey, cpropertyKeyAllocMap := *(*C.JSValueRef)(unsafe.Pointer(&propertyKey)), cgoAllocsUnknown
	cvalue, cvalueAllocMap := *(*C.JSValueRef)(unsafe.Pointer(&value)), cgoAllocsUnknown
	cattributes, cattributesAllocMap := (C.JSPropertyAttributes)(attributes), cgoAllocsUnknown
	cexception, cexceptionAllocMap := copyPJSValueRefBytes((*sliceHeader)(unsafe.Pointer(&exception)))
	C.JSObjectSetPropertyForKey(cctx, cobject, cpropertyKey, cvalue, cattributes, cexception)
	runtime.KeepAlive(cexceptionAllocMap)
	runtime.KeepAlive(cattributesAllocMap)
	runtime.KeepAlive(cvalueAllocMap)
	runtime.KeepAlive(cpropertyKeyAllocMap)
	runtime.KeepAlive(cobjectAllocMap)
	runtime.KeepAlive(cctxAllocMap)
}

// JSObjectDeletePropertyForKey function as declared in JavaScriptCore/JSObjectRef.h:716
func JSObjectDeletePropertyForKey(ctx JSContextRef, object JSObjectRef, propertyKey JSValueRef, exception []JSValueRef) bool {
	cctx, cctxAllocMap := *(*C.JSContextRef)(unsafe.Pointer(&ctx)), cgoAllocsUnknown
	cobject, cobjectAllocMap := *(*C.JSObjectRef)(unsafe.Pointer(&object)), cgoAllocsUnknown
	cpropertyKey, cpropertyKeyAllocMap := *(*C.JSValueRef)(unsafe.Pointer(&propertyKey)), cgoAllocsUnknown
	cexception, cexceptionAllocMap := copyPJSValueRefBytes((*sliceHeader)(unsafe.Pointer(&exception)))
	__ret := C.JSObjectDeletePropertyForKey(cctx, cobject, cpropertyKey, cexception)
	runtime.KeepAlive(cexceptionAllocMap)
	runtime.KeepAlive(cpropertyKeyAllocMap)
	runtime.KeepAlive(cobjectAllocMap)
	runtime.KeepAlive(cctxAllocMap)
	__v := (bool)(__ret)
	return __v
}

// JSObjectGetPropertyAtIndex function as declared in JavaScriptCore/JSObjectRef.h:728
func JSObjectGetPropertyAtIndex(ctx JSContextRef, object JSObjectRef, propertyIndex uint32, exception []JSValueRef) JSValueRef {
	cctx, cctxAllocMap := *(*C.JSContextRef)(unsafe.Pointer(&ctx)), cgoAllocsUnknown
	cobject, cobjectAllocMap := *(*C.JSObjectRef)(unsafe.Pointer(&object)), cgoAllocsUnknown
	cpropertyIndex, cpropertyIndexAllocMap := (C.uint)(propertyIndex), cgoAllocsUnknown
	cexception, cexceptionAllocMap := copyPJSValueRefBytes((*sliceHeader)(unsafe.Pointer(&exception)))
	__ret := C.JSObjectGetPropertyAtIndex(cctx, cobject, cpropertyIndex, cexception)
	runtime.KeepAlive(cexceptionAllocMap)
	runtime.KeepAlive(cpropertyIndexAllocMap)
	runtime.KeepAlive(cobjectAllocMap)
	runtime.KeepAlive(cctxAllocMap)
	__v := *(*JSValueRef)(unsafe.Pointer(&__ret))
	return __v
}

// JSObjectSetPropertyAtIndex function as declared in JavaScriptCore/JSObjectRef.h:740
func JSObjectSetPropertyAtIndex(ctx JSContextRef, object JSObjectRef, propertyIndex uint32, value JSValueRef, exception []JSValueRef) {
	cctx, cctxAllocMap := *(*C.JSContextRef)(unsafe.Pointer(&ctx)), cgoAllocsUnknown
	cobject, cobjectAllocMap := *(*C.JSObjectRef)(unsafe.Pointer(&object)), cgoAllocsUnknown
	cpropertyIndex, cpropertyIndexAllocMap := (C.uint)(propertyIndex), cgoAllocsUnknown
	cvalue, cvalueAllocMap := *(*C.JSValueRef)(unsafe.Pointer(&value)), cgoAllocsUnknown
	cexception, cexceptionAllocMap := copyPJSValueRefBytes((*sliceHeader)(unsafe.Pointer(&exception)))
	C.JSObjectSetPropertyAtIndex(cctx, cobject, cpropertyIndex, cvalue, cexception)
	runtime.KeepAlive(cexceptionAllocMap)
	runtime.KeepAlive(cvalueAllocMap)
	runtime.KeepAlive(cpropertyIndexAllocMap)
	runtime.KeepAlive(cobjectAllocMap)
	runtime.KeepAlive(cctxAllocMap)
}

// JSObjectGetPrivate function as declared in JavaScriptCore/JSObjectRef.h:748
func JSObjectGetPrivate(object JSObjectRef) unsafe.Pointer {
	cobject, cobjectAllocMap := *(*C.JSObjectRef)(unsafe.Pointer(&object)), cgoAllocsUnknown
	__ret := C.JSObjectGetPrivate(cobject)
	runtime.KeepAlive(cobjectAllocMap)
	__v := *(*unsafe.Pointer)(unsafe.Pointer(&__ret))
	return __v
}

// JSObjectSetPrivate function as declared in JavaScriptCore/JSObjectRef.h:758
func JSObjectSetPrivate(object JSObjectRef, data unsafe.Pointer) bool {
	cobject, cobjectAllocMap := *(*C.JSObjectRef)(unsafe.Pointer(&object)), cgoAllocsUnknown
	cdata, cdataAllocMap := data, cgoAllocsUnknown
	__ret := C.JSObjectSetPrivate(cobject, cdata)
	runtime.KeepAlive(cdataAllocMap)
	runtime.KeepAlive(cobjectAllocMap)
	__v := (bool)(__ret)
	return __v
}

// JSObjectIsFunction function as declared in JavaScriptCore/JSObjectRef.h:767
func JSObjectIsFunction(ctx JSContextRef, object JSObjectRef) bool {
	cctx, cctxAllocMap := *(*C.JSContextRef)(unsafe.Pointer(&ctx)), cgoAllocsUnknown
	cobject, cobjectAllocMap := *(*C.JSObjectRef)(unsafe.Pointer(&object)), cgoAllocsUnknown
	__ret := C.JSObjectIsFunction(cctx, cobject)
	runtime.KeepAlive(cobjectAllocMap)
	runtime.KeepAlive(cctxAllocMap)
	__v := (bool)(__ret)
	return __v
}

// JSObjectCallAsFunction function as declared in JavaScriptCore/JSObjectRef.h:780
func JSObjectCallAsFunction(ctx JSContextRef, object JSObjectRef, thisObject JSObjectRef, argumentCount uint64, arguments []JSValueRef, exception []JSValueRef) JSValueRef {
	cctx, cctxAllocMap := *(*C.JSContextRef)(unsafe.Pointer(&ctx)), cgoAllocsUnknown
	cobject, cobjectAllocMap := *(*C.JSObjectRef)(unsafe.Pointer(&object)), cgoAllocsUnknown
	cthisObject, cthisObjectAllocMap := *(*C.JSObjectRef)(unsafe.Pointer(&thisObject)), cgoAllocsUnknown
	cargumentCount, cargumentCountAllocMap := (C.size_t)(argumentCount), cgoAllocsUnknown
	carguments, cargumentsAllocMap := copyPJSValueRefBytes((*sliceHeader)(unsafe.Pointer(&arguments)))
	cexception, cexceptionAllocMap := copyPJSValueRefBytes((*sliceHeader)(unsafe.Pointer(&exception)))
	__ret := C.JSObjectCallAsFunction(cctx, cobject, cthisObject, cargumentCount, carguments, cexception)
	runtime.KeepAlive(cexceptionAllocMap)
	runtime.KeepAlive(cargumentsAllocMap)
	runtime.KeepAlive(cargumentCountAllocMap)
	runtime.KeepAlive(cthisObjectAllocMap)
	runtime.KeepAlive(cobjectAllocMap)
	runtime.KeepAlive(cctxAllocMap)
	__v := *(*JSValueRef)(unsafe.Pointer(&__ret))
	return __v
}

// JSObjectIsConstructor function as declared in JavaScriptCore/JSObjectRef.h:789
func JSObjectIsConstructor(ctx JSContextRef, object JSObjectRef) bool {
	cctx, cctxAllocMap := *(*C.JSContextRef)(unsafe.Pointer(&ctx)), cgoAllocsUnknown
	cobject, cobjectAllocMap := *(*C.JSObjectRef)(unsafe.Pointer(&object)), cgoAllocsUnknown
	__ret := C.JSObjectIsConstructor(cctx, cobject)
	runtime.KeepAlive(cobjectAllocMap)
	runtime.KeepAlive(cctxAllocMap)
	__v := (bool)(__ret)
	return __v
}

// JSObjectCallAsConstructor function as declared in JavaScriptCore/JSObjectRef.h:801
func JSObjectCallAsConstructor(ctx JSContextRef, object JSObjectRef, argumentCount uint64, arguments []JSValueRef, exception []JSValueRef) JSObjectRef {
	cctx, cctxAllocMap := *(*C.JSContextRef)(unsafe.Pointer(&ctx)), cgoAllocsUnknown
	cobject, cobjectAllocMap := *(*C.JSObjectRef)(unsafe.Pointer(&object)), cgoAllocsUnknown
	cargumentCount, cargumentCountAllocMap := (C.size_t)(argumentCount), cgoAllocsUnknown
	carguments, cargumentsAllocMap := copyPJSValueRefBytes((*sliceHeader)(unsafe.Pointer(&arguments)))
	cexception, cexceptionAllocMap := copyPJSValueRefBytes((*sliceHeader)(unsafe.Pointer(&exception)))
	__ret := C.JSObjectCallAsConstructor(cctx, cobject, cargumentCount, carguments, cexception)
	runtime.KeepAlive(cexceptionAllocMap)
	runtime.KeepAlive(cargumentsAllocMap)
	runtime.KeepAlive(cargumentCountAllocMap)
	runtime.KeepAlive(cobjectAllocMap)
	runtime.KeepAlive(cctxAllocMap)
	__v := *(*JSObjectRef)(unsafe.Pointer(&__ret))
	return __v
}

// JSObjectCopyPropertyNames function as declared in JavaScriptCore/JSObjectRef.h:810
func JSObjectCopyPropertyNames(ctx JSContextRef, object JSObjectRef) JSPropertyNameArrayRef {
	cctx, cctxAllocMap := *(*C.JSContextRef)(unsafe.Pointer(&ctx)), cgoAllocsUnknown
	cobject, cobjectAllocMap := *(*C.JSObjectRef)(unsafe.Pointer(&object)), cgoAllocsUnknown
	__ret := C.JSObjectCopyPropertyNames(cctx, cobject)
	runtime.KeepAlive(cobjectAllocMap)
	runtime.KeepAlive(cctxAllocMap)
	__v := *(*JSPropertyNameArrayRef)(unsafe.Pointer(&__ret))
	return __v
}

// JSPropertyNameArrayRetain function as declared in JavaScriptCore/JSObjectRef.h:818
func JSPropertyNameArrayRetain(array JSPropertyNameArrayRef) JSPropertyNameArrayRef {
	carray, carrayAllocMap := *(*C.JSPropertyNameArrayRef)(unsafe.Pointer(&array)), cgoAllocsUnknown
	__ret := C.JSPropertyNameArrayRetain(carray)
	runtime.KeepAlive(carrayAllocMap)
	__v := *(*JSPropertyNameArrayRef)(unsafe.Pointer(&__ret))
	return __v
}

// JSPropertyNameArrayRelease function as declared in JavaScriptCore/JSObjectRef.h:825
func JSPropertyNameArrayRelease(array JSPropertyNameArrayRef) {
	carray, carrayAllocMap := *(*C.JSPropertyNameArrayRef)(unsafe.Pointer(&array)), cgoAllocsUnknown
	C.JSPropertyNameArrayRelease(carray)
	runtime.KeepAlive(carrayAllocMap)
}

// JSPropertyNameArrayGetCount function as declared in JavaScriptCore/JSObjectRef.h:833
func JSPropertyNameArrayGetCount(array JSPropertyNameArrayRef) uint64 {
	carray, carrayAllocMap := *(*C.JSPropertyNameArrayRef)(unsafe.Pointer(&array)), cgoAllocsUnknown
	__ret := C.JSPropertyNameArrayGetCount(carray)
	runtime.KeepAlive(carrayAllocMap)
	__v := (uint64)(__ret)
	return __v
}

// JSPropertyNameArrayGetNameAtIndex function as declared in JavaScriptCore/JSObjectRef.h:842
func JSPropertyNameArrayGetNameAtIndex(array JSPropertyNameArrayRef, index uint64) JSStringRef {
	carray, carrayAllocMap := *(*C.JSPropertyNameArrayRef)(unsafe.Pointer(&array)), cgoAllocsUnknown
	cindex, cindexAllocMap := (C.size_t)(index), cgoAllocsUnknown
	__ret := C.JSPropertyNameArrayGetNameAtIndex(carray, cindex)
	runtime.KeepAlive(cindexAllocMap)
	runtime.KeepAlive(carrayAllocMap)
	__v := *(*JSStringRef)(unsafe.Pointer(&__ret))
	return __v
}

// JSPropertyNameAccumulatorAddName function as declared in JavaScriptCore/JSObjectRef.h:850
func JSPropertyNameAccumulatorAddName(accumulator JSPropertyNameAccumulatorRef, propertyName JSStringRef) {
	caccumulator, caccumulatorAllocMap := *(*C.JSPropertyNameAccumulatorRef)(unsafe.Pointer(&accumulator)), cgoAllocsUnknown
	cpropertyName, cpropertyNameAllocMap := *(*C.JSStringRef)(unsafe.Pointer(&propertyName)), cgoAllocsUnknown
	C.JSPropertyNameAccumulatorAddName(caccumulator, cpropertyName)
	runtime.KeepAlive(cpropertyNameAllocMap)
	runtime.KeepAlive(caccumulatorAllocMap)
}

// JSValueGetType function as declared in JavaScriptCore/JSValueRef.h:98
func JSValueGetType(ctx JSContextRef, value JSValueRef) JSType {
	cctx, cctxAllocMap := *(*C.JSContextRef)(unsafe.Pointer(&ctx)), cgoAllocsUnknown
	cvalue, cvalueAllocMap := *(*C.JSValueRef)(unsafe.Pointer(&value)), cgoAllocsUnknown
	__ret := C.JSValueGetType(cctx, cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	runtime.KeepAlive(cctxAllocMap)
	__v := (JSType)(__ret)
	return __v
}

// JSValueIsUndefined function as declared in JavaScriptCore/JSValueRef.h:107
func JSValueIsUndefined(ctx JSContextRef, value JSValueRef) bool {
	cctx, cctxAllocMap := *(*C.JSContextRef)(unsafe.Pointer(&ctx)), cgoAllocsUnknown
	cvalue, cvalueAllocMap := *(*C.JSValueRef)(unsafe.Pointer(&value)), cgoAllocsUnknown
	__ret := C.JSValueIsUndefined(cctx, cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	runtime.KeepAlive(cctxAllocMap)
	__v := (bool)(__ret)
	return __v
}

// JSValueIsNull function as declared in JavaScriptCore/JSValueRef.h:116
func JSValueIsNull(ctx JSContextRef, value JSValueRef) bool {
	cctx, cctxAllocMap := *(*C.JSContextRef)(unsafe.Pointer(&ctx)), cgoAllocsUnknown
	cvalue, cvalueAllocMap := *(*C.JSValueRef)(unsafe.Pointer(&value)), cgoAllocsUnknown
	__ret := C.JSValueIsNull(cctx, cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	runtime.KeepAlive(cctxAllocMap)
	__v := (bool)(__ret)
	return __v
}

// JSValueIsBoolean function as declared in JavaScriptCore/JSValueRef.h:125
func JSValueIsBoolean(ctx JSContextRef, value JSValueRef) bool {
	cctx, cctxAllocMap := *(*C.JSContextRef)(unsafe.Pointer(&ctx)), cgoAllocsUnknown
	cvalue, cvalueAllocMap := *(*C.JSValueRef)(unsafe.Pointer(&value)), cgoAllocsUnknown
	__ret := C.JSValueIsBoolean(cctx, cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	runtime.KeepAlive(cctxAllocMap)
	__v := (bool)(__ret)
	return __v
}

// JSValueIsNumber function as declared in JavaScriptCore/JSValueRef.h:134
func JSValueIsNumber(ctx JSContextRef, value JSValueRef) bool {
	cctx, cctxAllocMap := *(*C.JSContextRef)(unsafe.Pointer(&ctx)), cgoAllocsUnknown
	cvalue, cvalueAllocMap := *(*C.JSValueRef)(unsafe.Pointer(&value)), cgoAllocsUnknown
	__ret := C.JSValueIsNumber(cctx, cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	runtime.KeepAlive(cctxAllocMap)
	__v := (bool)(__ret)
	return __v
}

// JSValueIsString function as declared in JavaScriptCore/JSValueRef.h:143
func JSValueIsString(ctx JSContextRef, value JSValueRef) bool {
	cctx, cctxAllocMap := *(*C.JSContextRef)(unsafe.Pointer(&ctx)), cgoAllocsUnknown
	cvalue, cvalueAllocMap := *(*C.JSValueRef)(unsafe.Pointer(&value)), cgoAllocsUnknown
	__ret := C.JSValueIsString(cctx, cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	runtime.KeepAlive(cctxAllocMap)
	__v := (bool)(__ret)
	return __v
}

// JSValueIsSymbol function as declared in JavaScriptCore/JSValueRef.h:152
func JSValueIsSymbol(ctx JSContextRef, value JSValueRef) bool {
	cctx, cctxAllocMap := *(*C.JSContextRef)(unsafe.Pointer(&ctx)), cgoAllocsUnknown
	cvalue, cvalueAllocMap := *(*C.JSValueRef)(unsafe.Pointer(&value)), cgoAllocsUnknown
	__ret := C.JSValueIsSymbol(cctx, cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	runtime.KeepAlive(cctxAllocMap)
	__v := (bool)(__ret)
	return __v
}

// JSValueIsObject function as declared in JavaScriptCore/JSValueRef.h:161
func JSValueIsObject(ctx JSContextRef, value JSValueRef) bool {
	cctx, cctxAllocMap := *(*C.JSContextRef)(unsafe.Pointer(&ctx)), cgoAllocsUnknown
	cvalue, cvalueAllocMap := *(*C.JSValueRef)(unsafe.Pointer(&value)), cgoAllocsUnknown
	__ret := C.JSValueIsObject(cctx, cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	runtime.KeepAlive(cctxAllocMap)
	__v := (bool)(__ret)
	return __v
}

// JSValueIsObjectOfClass function as declared in JavaScriptCore/JSValueRef.h:172
func JSValueIsObjectOfClass(ctx JSContextRef, value JSValueRef, jsClass JSClassRef) bool {
	cctx, cctxAllocMap := *(*C.JSContextRef)(unsafe.Pointer(&ctx)), cgoAllocsUnknown
	cvalue, cvalueAllocMap := *(*C.JSValueRef)(unsafe.Pointer(&value)), cgoAllocsUnknown
	cjsClass, cjsClassAllocMap := *(*C.JSClassRef)(unsafe.Pointer(&jsClass)), cgoAllocsUnknown
	__ret := C.JSValueIsObjectOfClass(cctx, cvalue, cjsClass)
	runtime.KeepAlive(cjsClassAllocMap)
	runtime.KeepAlive(cvalueAllocMap)
	runtime.KeepAlive(cctxAllocMap)
	__v := (bool)(__ret)
	return __v
}

// JSValueIsArray function as declared in JavaScriptCore/JSValueRef.h:181
func JSValueIsArray(ctx JSContextRef, value JSValueRef) bool {
	cctx, cctxAllocMap := *(*C.JSContextRef)(unsafe.Pointer(&ctx)), cgoAllocsUnknown
	cvalue, cvalueAllocMap := *(*C.JSValueRef)(unsafe.Pointer(&value)), cgoAllocsUnknown
	__ret := C.JSValueIsArray(cctx, cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	runtime.KeepAlive(cctxAllocMap)
	__v := (bool)(__ret)
	return __v
}

// JSValueIsDate function as declared in JavaScriptCore/JSValueRef.h:190
func JSValueIsDate(ctx JSContextRef, value JSValueRef) bool {
	cctx, cctxAllocMap := *(*C.JSContextRef)(unsafe.Pointer(&ctx)), cgoAllocsUnknown
	cvalue, cvalueAllocMap := *(*C.JSValueRef)(unsafe.Pointer(&value)), cgoAllocsUnknown
	__ret := C.JSValueIsDate(cctx, cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	runtime.KeepAlive(cctxAllocMap)
	__v := (bool)(__ret)
	return __v
}

// JSValueGetTypedArrayType function as declared in JavaScriptCore/JSValueRef.h:200
func JSValueGetTypedArrayType(ctx JSContextRef, value JSValueRef, exception []JSValueRef) JSTypedArrayType {
	cctx, cctxAllocMap := *(*C.JSContextRef)(unsafe.Pointer(&ctx)), cgoAllocsUnknown
	cvalue, cvalueAllocMap := *(*C.JSValueRef)(unsafe.Pointer(&value)), cgoAllocsUnknown
	cexception, cexceptionAllocMap := copyPJSValueRefBytes((*sliceHeader)(unsafe.Pointer(&exception)))
	__ret := C.JSValueGetTypedArrayType(cctx, cvalue, cexception)
	runtime.KeepAlive(cexceptionAllocMap)
	runtime.KeepAlive(cvalueAllocMap)
	runtime.KeepAlive(cctxAllocMap)
	__v := (JSTypedArrayType)(__ret)
	return __v
}

// JSValueIsEqual function as declared in JavaScriptCore/JSValueRef.h:213
func JSValueIsEqual(ctx JSContextRef, a JSValueRef, b JSValueRef, exception []JSValueRef) bool {
	cctx, cctxAllocMap := *(*C.JSContextRef)(unsafe.Pointer(&ctx)), cgoAllocsUnknown
	ca, caAllocMap := *(*C.JSValueRef)(unsafe.Pointer(&a)), cgoAllocsUnknown
	cb, cbAllocMap := *(*C.JSValueRef)(unsafe.Pointer(&b)), cgoAllocsUnknown
	cexception, cexceptionAllocMap := copyPJSValueRefBytes((*sliceHeader)(unsafe.Pointer(&exception)))
	__ret := C.JSValueIsEqual(cctx, ca, cb, cexception)
	runtime.KeepAlive(cexceptionAllocMap)
	runtime.KeepAlive(cbAllocMap)
	runtime.KeepAlive(caAllocMap)
	runtime.KeepAlive(cctxAllocMap)
	__v := (bool)(__ret)
	return __v
}

// JSValueIsStrictEqual function as declared in JavaScriptCore/JSValueRef.h:223
func JSValueIsStrictEqual(ctx JSContextRef, a JSValueRef, b JSValueRef) bool {
	cctx, cctxAllocMap := *(*C.JSContextRef)(unsafe.Pointer(&ctx)), cgoAllocsUnknown
	ca, caAllocMap := *(*C.JSValueRef)(unsafe.Pointer(&a)), cgoAllocsUnknown
	cb, cbAllocMap := *(*C.JSValueRef)(unsafe.Pointer(&b)), cgoAllocsUnknown
	__ret := C.JSValueIsStrictEqual(cctx, ca, cb)
	runtime.KeepAlive(cbAllocMap)
	runtime.KeepAlive(caAllocMap)
	runtime.KeepAlive(cctxAllocMap)
	__v := (bool)(__ret)
	return __v
}

// JSValueIsInstanceOfConstructor function as declared in JavaScriptCore/JSValueRef.h:234
func JSValueIsInstanceOfConstructor(ctx JSContextRef, value JSValueRef, constructor JSObjectRef, exception []JSValueRef) bool {
	cctx, cctxAllocMap := *(*C.JSContextRef)(unsafe.Pointer(&ctx)), cgoAllocsUnknown
	cvalue, cvalueAllocMap := *(*C.JSValueRef)(unsafe.Pointer(&value)), cgoAllocsUnknown
	cconstructor, cconstructorAllocMap := *(*C.JSObjectRef)(unsafe.Pointer(&constructor)), cgoAllocsUnknown
	cexception, cexceptionAllocMap := copyPJSValueRefBytes((*sliceHeader)(unsafe.Pointer(&exception)))
	__ret := C.JSValueIsInstanceOfConstructor(cctx, cvalue, cconstructor, cexception)
	runtime.KeepAlive(cexceptionAllocMap)
	runtime.KeepAlive(cconstructorAllocMap)
	runtime.KeepAlive(cvalueAllocMap)
	runtime.KeepAlive(cctxAllocMap)
	__v := (bool)(__ret)
	return __v
}

// JSValueMakeUndefined function as declared in JavaScriptCore/JSValueRef.h:244
func JSValueMakeUndefined(ctx JSContextRef) JSValueRef {
	cctx, cctxAllocMap := *(*C.JSContextRef)(unsafe.Pointer(&ctx)), cgoAllocsUnknown
	__ret := C.JSValueMakeUndefined(cctx)
	runtime.KeepAlive(cctxAllocMap)
	__v := *(*JSValueRef)(unsafe.Pointer(&__ret))
	return __v
}

// JSValueMakeNull function as declared in JavaScriptCore/JSValueRef.h:252
func JSValueMakeNull(ctx JSContextRef) JSValueRef {
	cctx, cctxAllocMap := *(*C.JSContextRef)(unsafe.Pointer(&ctx)), cgoAllocsUnknown
	__ret := C.JSValueMakeNull(cctx)
	runtime.KeepAlive(cctxAllocMap)
	__v := *(*JSValueRef)(unsafe.Pointer(&__ret))
	return __v
}

// JSValueMakeBoolean function as declared in JavaScriptCore/JSValueRef.h:261
func JSValueMakeBoolean(ctx JSContextRef, boolean bool) JSValueRef {
	cctx, cctxAllocMap := *(*C.JSContextRef)(unsafe.Pointer(&ctx)), cgoAllocsUnknown
	cboolean, cbooleanAllocMap := (C._Bool)(boolean), cgoAllocsUnknown
	__ret := C.JSValueMakeBoolean(cctx, cboolean)
	runtime.KeepAlive(cbooleanAllocMap)
	runtime.KeepAlive(cctxAllocMap)
	__v := *(*JSValueRef)(unsafe.Pointer(&__ret))
	return __v
}

// JSValueMakeNumber function as declared in JavaScriptCore/JSValueRef.h:270
func JSValueMakeNumber(ctx JSContextRef, number float64) JSValueRef {
	cctx, cctxAllocMap := *(*C.JSContextRef)(unsafe.Pointer(&ctx)), cgoAllocsUnknown
	cnumber, cnumberAllocMap := (C.double)(number), cgoAllocsUnknown
	__ret := C.JSValueMakeNumber(cctx, cnumber)
	runtime.KeepAlive(cnumberAllocMap)
	runtime.KeepAlive(cctxAllocMap)
	__v := *(*JSValueRef)(unsafe.Pointer(&__ret))
	return __v
}

// JSValueMakeString function as declared in JavaScriptCore/JSValueRef.h:280
func JSValueMakeString(ctx JSContextRef, string JSStringRef) JSValueRef {
	cctx, cctxAllocMap := *(*C.JSContextRef)(unsafe.Pointer(&ctx)), cgoAllocsUnknown
	cstring, cstringAllocMap := *(*C.JSStringRef)(unsafe.Pointer(&string)), cgoAllocsUnknown
	__ret := C.JSValueMakeString(cctx, cstring)
	runtime.KeepAlive(cstringAllocMap)
	runtime.KeepAlive(cctxAllocMap)
	__v := *(*JSValueRef)(unsafe.Pointer(&__ret))
	return __v
}

// JSValueMakeSymbol function as declared in JavaScriptCore/JSValueRef.h:289
func JSValueMakeSymbol(ctx JSContextRef, description JSStringRef) JSValueRef {
	cctx, cctxAllocMap := *(*C.JSContextRef)(unsafe.Pointer(&ctx)), cgoAllocsUnknown
	cdescription, cdescriptionAllocMap := *(*C.JSStringRef)(unsafe.Pointer(&description)), cgoAllocsUnknown
	__ret := C.JSValueMakeSymbol(cctx, cdescription)
	runtime.KeepAlive(cdescriptionAllocMap)
	runtime.KeepAlive(cctxAllocMap)
	__v := *(*JSValueRef)(unsafe.Pointer(&__ret))
	return __v
}

// JSValueMakeFromJSONString function as declared in JavaScriptCore/JSValueRef.h:300
func JSValueMakeFromJSONString(ctx JSContextRef, string JSStringRef) JSValueRef {
	cctx, cctxAllocMap := *(*C.JSContextRef)(unsafe.Pointer(&ctx)), cgoAllocsUnknown
	cstring, cstringAllocMap := *(*C.JSStringRef)(unsafe.Pointer(&string)), cgoAllocsUnknown
	__ret := C.JSValueMakeFromJSONString(cctx, cstring)
	runtime.KeepAlive(cstringAllocMap)
	runtime.KeepAlive(cctxAllocMap)
	__v := *(*JSValueRef)(unsafe.Pointer(&__ret))
	return __v
}

// JSValueCreateJSONString function as declared in JavaScriptCore/JSValueRef.h:311
func JSValueCreateJSONString(ctx JSContextRef, value JSValueRef, indent uint32, exception []JSValueRef) JSStringRef {
	cctx, cctxAllocMap := *(*C.JSContextRef)(unsafe.Pointer(&ctx)), cgoAllocsUnknown
	cvalue, cvalueAllocMap := *(*C.JSValueRef)(unsafe.Pointer(&value)), cgoAllocsUnknown
	cindent, cindentAllocMap := (C.uint)(indent), cgoAllocsUnknown
	cexception, cexceptionAllocMap := copyPJSValueRefBytes((*sliceHeader)(unsafe.Pointer(&exception)))
	__ret := C.JSValueCreateJSONString(cctx, cvalue, cindent, cexception)
	runtime.KeepAlive(cexceptionAllocMap)
	runtime.KeepAlive(cindentAllocMap)
	runtime.KeepAlive(cvalueAllocMap)
	runtime.KeepAlive(cctxAllocMap)
	__v := *(*JSStringRef)(unsafe.Pointer(&__ret))
	return __v
}

// JSValueToBoolean function as declared in JavaScriptCore/JSValueRef.h:322
func JSValueToBoolean(ctx JSContextRef, value JSValueRef) bool {
	cctx, cctxAllocMap := *(*C.JSContextRef)(unsafe.Pointer(&ctx)), cgoAllocsUnknown
	cvalue, cvalueAllocMap := *(*C.JSValueRef)(unsafe.Pointer(&value)), cgoAllocsUnknown
	__ret := C.JSValueToBoolean(cctx, cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	runtime.KeepAlive(cctxAllocMap)
	__v := (bool)(__ret)
	return __v
}

// JSValueToNumber function as declared in JavaScriptCore/JSValueRef.h:332
func JSValueToNumber(ctx JSContextRef, value JSValueRef, exception []JSValueRef) float64 {
	cctx, cctxAllocMap := *(*C.JSContextRef)(unsafe.Pointer(&ctx)), cgoAllocsUnknown
	cvalue, cvalueAllocMap := *(*C.JSValueRef)(unsafe.Pointer(&value)), cgoAllocsUnknown
	cexception, cexceptionAllocMap := copyPJSValueRefBytes((*sliceHeader)(unsafe.Pointer(&exception)))
	__ret := C.JSValueToNumber(cctx, cvalue, cexception)
	runtime.KeepAlive(cexceptionAllocMap)
	runtime.KeepAlive(cvalueAllocMap)
	runtime.KeepAlive(cctxAllocMap)
	__v := (float64)(__ret)
	return __v
}

// JSValueToStringCopy function as declared in JavaScriptCore/JSValueRef.h:342
func JSValueToStringCopy(ctx JSContextRef, value JSValueRef, exception []JSValueRef) JSStringRef {
	cctx, cctxAllocMap := *(*C.JSContextRef)(unsafe.Pointer(&ctx)), cgoAllocsUnknown
	cvalue, cvalueAllocMap := *(*C.JSValueRef)(unsafe.Pointer(&value)), cgoAllocsUnknown
	cexception, cexceptionAllocMap := copyPJSValueRefBytes((*sliceHeader)(unsafe.Pointer(&exception)))
	__ret := C.JSValueToStringCopy(cctx, cvalue, cexception)
	runtime.KeepAlive(cexceptionAllocMap)
	runtime.KeepAlive(cvalueAllocMap)
	runtime.KeepAlive(cctxAllocMap)
	__v := *(*JSStringRef)(unsafe.Pointer(&__ret))
	return __v
}

// JSValueToObject function as declared in JavaScriptCore/JSValueRef.h:352
func JSValueToObject(ctx JSContextRef, value JSValueRef, exception []JSValueRef) JSObjectRef {
	cctx, cctxAllocMap := *(*C.JSContextRef)(unsafe.Pointer(&ctx)), cgoAllocsUnknown
	cvalue, cvalueAllocMap := *(*C.JSValueRef)(unsafe.Pointer(&value)), cgoAllocsUnknown
	cexception, cexceptionAllocMap := copyPJSValueRefBytes((*sliceHeader)(unsafe.Pointer(&exception)))
	__ret := C.JSValueToObject(cctx, cvalue, cexception)
	runtime.KeepAlive(cexceptionAllocMap)
	runtime.KeepAlive(cvalueAllocMap)
	runtime.KeepAlive(cctxAllocMap)
	__v := *(*JSObjectRef)(unsafe.Pointer(&__ret))
	return __v
}

// JSValueProtect function as declared in JavaScriptCore/JSValueRef.h:364
func JSValueProtect(ctx JSContextRef, value JSValueRef) {
	cctx, cctxAllocMap := *(*C.JSContextRef)(unsafe.Pointer(&ctx)), cgoAllocsUnknown
	cvalue, cvalueAllocMap := *(*C.JSValueRef)(unsafe.Pointer(&value)), cgoAllocsUnknown
	C.JSValueProtect(cctx, cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	runtime.KeepAlive(cctxAllocMap)
}

// JSValueUnprotect function as declared in JavaScriptCore/JSValueRef.h:374
func JSValueUnprotect(ctx JSContextRef, value JSValueRef) {
	cctx, cctxAllocMap := *(*C.JSContextRef)(unsafe.Pointer(&ctx)), cgoAllocsUnknown
	cvalue, cvalueAllocMap := *(*C.JSValueRef)(unsafe.Pointer(&value)), cgoAllocsUnknown
	C.JSValueUnprotect(cctx, cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	runtime.KeepAlive(cctxAllocMap)
}

// JSStringCreateWithCharacters function as declared in JavaScriptCore/JSStringRef.h:61
func JSStringCreateWithCharacters(chars []JSChar, numChars uint64) JSStringRef {
	cchars, ccharsAllocMap := copyPJSCharBytes((*sliceHeader)(unsafe.Pointer(&chars)))
	cnumChars, cnumCharsAllocMap := (C.size_t)(numChars), cgoAllocsUnknown
	__ret := C.JSStringCreateWithCharacters(cchars, cnumChars)
	runtime.KeepAlive(cnumCharsAllocMap)
	runtime.KeepAlive(ccharsAllocMap)
	__v := *(*JSStringRef)(unsafe.Pointer(&__ret))
	return __v
}

// JSStringCreateWithUTF8CString function as declared in JavaScriptCore/JSStringRef.h:68
func JSStringCreateWithUTF8CString(string string) JSStringRef {
	string = safeString(string)
	cstring, cstringAllocMap := unpackPCharString(string)
	__ret := C.JSStringCreateWithUTF8CString(cstring)
	runtime.KeepAlive(string)
	runtime.KeepAlive(cstringAllocMap)
	__v := *(*JSStringRef)(unsafe.Pointer(&__ret))
	return __v
}

// JSStringRetain function as declared in JavaScriptCore/JSStringRef.h:76
func JSStringRetain(string JSStringRef) JSStringRef {
	cstring, cstringAllocMap := *(*C.JSStringRef)(unsafe.Pointer(&string)), cgoAllocsUnknown
	__ret := C.JSStringRetain(cstring)
	runtime.KeepAlive(cstringAllocMap)
	__v := *(*JSStringRef)(unsafe.Pointer(&__ret))
	return __v
}

// JSStringRelease function as declared in JavaScriptCore/JSStringRef.h:82
func JSStringRelease(string JSStringRef) {
	cstring, cstringAllocMap := *(*C.JSStringRef)(unsafe.Pointer(&string)), cgoAllocsUnknown
	C.JSStringRelease(cstring)
	runtime.KeepAlive(cstringAllocMap)
}

// JSStringGetLength function as declared in JavaScriptCore/JSStringRef.h:90
func JSStringGetLength(string JSStringRef) uint64 {
	cstring, cstringAllocMap := *(*C.JSStringRef)(unsafe.Pointer(&string)), cgoAllocsUnknown
	__ret := C.JSStringGetLength(cstring)
	runtime.KeepAlive(cstringAllocMap)
	__v := (uint64)(__ret)
	return __v
}

// JSStringGetCharactersPtr function as declared in JavaScriptCore/JSStringRef.h:99
func JSStringGetCharactersPtr(string JSStringRef) *JSChar {
	cstring, cstringAllocMap := *(*C.JSStringRef)(unsafe.Pointer(&string)), cgoAllocsUnknown
	__ret := C.JSStringGetCharactersPtr(cstring)
	runtime.KeepAlive(cstringAllocMap)
	__v := *(**JSChar)(unsafe.Pointer(&__ret))
	return __v
}

// JSStringGetMaximumUTF8CStringSize function as declared in JavaScriptCore/JSStringRef.h:111
func JSStringGetMaximumUTF8CStringSize(string JSStringRef) uint64 {
	cstring, cstringAllocMap := *(*C.JSStringRef)(unsafe.Pointer(&string)), cgoAllocsUnknown
	__ret := C.JSStringGetMaximumUTF8CStringSize(cstring)
	runtime.KeepAlive(cstringAllocMap)
	__v := (uint64)(__ret)
	return __v
}

// JSStringGetUTF8CString function as declared in JavaScriptCore/JSStringRef.h:125
func JSStringGetUTF8CString(string JSStringRef, buffer []byte, bufferSize uint64) uint64 {
	cstring, cstringAllocMap := *(*C.JSStringRef)(unsafe.Pointer(&string)), cgoAllocsUnknown
	cbuffer, cbufferAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&buffer)))
	cbufferSize, cbufferSizeAllocMap := (C.size_t)(bufferSize), cgoAllocsUnknown
	__ret := C.JSStringGetUTF8CString(cstring, cbuffer, cbufferSize)
	runtime.KeepAlive(cbufferSizeAllocMap)
	runtime.KeepAlive(cbufferAllocMap)
	runtime.KeepAlive(cstringAllocMap)
	__v := (uint64)(__ret)
	return __v
}

// JSStringIsEqual function as declared in JavaScriptCore/JSStringRef.h:134
func JSStringIsEqual(a JSStringRef, b JSStringRef) bool {
	ca, caAllocMap := *(*C.JSStringRef)(unsafe.Pointer(&a)), cgoAllocsUnknown
	cb, cbAllocMap := *(*C.JSStringRef)(unsafe.Pointer(&b)), cgoAllocsUnknown
	__ret := C.JSStringIsEqual(ca, cb)
	runtime.KeepAlive(cbAllocMap)
	runtime.KeepAlive(caAllocMap)
	__v := (bool)(__ret)
	return __v
}

// JSStringIsEqualToUTF8CString function as declared in JavaScriptCore/JSStringRef.h:142
func JSStringIsEqualToUTF8CString(a JSStringRef, b string) bool {
	ca, caAllocMap := *(*C.JSStringRef)(unsafe.Pointer(&a)), cgoAllocsUnknown
	b = safeString(b)
	cb, cbAllocMap := unpackPCharString(b)
	__ret := C.JSStringIsEqualToUTF8CString(ca, cb)
	runtime.KeepAlive(b)
	runtime.KeepAlive(cbAllocMap)
	runtime.KeepAlive(caAllocMap)
	__v := (bool)(__ret)
	return __v
}

// JSObjectMakeTypedArray function as declared in JavaScriptCore/JSTypedArray.h:48
func JSObjectMakeTypedArray(ctx JSContextRef, arrayType JSTypedArrayType, length uint64, exception []JSValueRef) JSObjectRef {
	cctx, cctxAllocMap := *(*C.JSContextRef)(unsafe.Pointer(&ctx)), cgoAllocsUnknown
	carrayType, carrayTypeAllocMap := (C.JSTypedArrayType)(arrayType), cgoAllocsUnknown
	clength, clengthAllocMap := (C.size_t)(length), cgoAllocsUnknown
	cexception, cexceptionAllocMap := copyPJSValueRefBytes((*sliceHeader)(unsafe.Pointer(&exception)))
	__ret := C.JSObjectMakeTypedArray(cctx, carrayType, clength, cexception)
	runtime.KeepAlive(cexceptionAllocMap)
	runtime.KeepAlive(clengthAllocMap)
	runtime.KeepAlive(carrayTypeAllocMap)
	runtime.KeepAlive(cctxAllocMap)
	__v := *(*JSObjectRef)(unsafe.Pointer(&__ret))
	return __v
}

// JSObjectMakeTypedArrayWithBytesNoCopy function as declared in JavaScriptCore/JSTypedArray.h:63
func JSObjectMakeTypedArrayWithBytesNoCopy(ctx JSContextRef, arrayType JSTypedArrayType, bytes unsafe.Pointer, byteLength uint64, bytesDeallocator JSTypedArrayBytesDeallocator, deallocatorContext unsafe.Pointer, exception []JSValueRef) JSObjectRef {
	cctx, cctxAllocMap := *(*C.JSContextRef)(unsafe.Pointer(&ctx)), cgoAllocsUnknown
	carrayType, carrayTypeAllocMap := (C.JSTypedArrayType)(arrayType), cgoAllocsUnknown
	cbytes, cbytesAllocMap := bytes, cgoAllocsUnknown
	cbyteLength, cbyteLengthAllocMap := (C.size_t)(byteLength), cgoAllocsUnknown
	cbytesDeallocator, cbytesDeallocatorAllocMap := bytesDeallocator.PassValue()
	cdeallocatorContext, cdeallocatorContextAllocMap := deallocatorContext, cgoAllocsUnknown
	cexception, cexceptionAllocMap := copyPJSValueRefBytes((*sliceHeader)(unsafe.Pointer(&exception)))
	__ret := C.JSObjectMakeTypedArrayWithBytesNoCopy(cctx, carrayType, cbytes, cbyteLength, cbytesDeallocator, cdeallocatorContext, cexception)
	runtime.KeepAlive(cexceptionAllocMap)
	runtime.KeepAlive(cdeallocatorContextAllocMap)
	runtime.KeepAlive(cbytesDeallocatorAllocMap)
	runtime.KeepAlive(cbyteLengthAllocMap)
	runtime.KeepAlive(cbytesAllocMap)
	runtime.KeepAlive(carrayTypeAllocMap)
	runtime.KeepAlive(cctxAllocMap)
	__v := *(*JSObjectRef)(unsafe.Pointer(&__ret))
	return __v
}

// JSObjectMakeTypedArrayWithArrayBuffer function as declared in JavaScriptCore/JSTypedArray.h:74
func JSObjectMakeTypedArrayWithArrayBuffer(ctx JSContextRef, arrayType JSTypedArrayType, buffer JSObjectRef, exception []JSValueRef) JSObjectRef {
	cctx, cctxAllocMap := *(*C.JSContextRef)(unsafe.Pointer(&ctx)), cgoAllocsUnknown
	carrayType, carrayTypeAllocMap := (C.JSTypedArrayType)(arrayType), cgoAllocsUnknown
	cbuffer, cbufferAllocMap := *(*C.JSObjectRef)(unsafe.Pointer(&buffer)), cgoAllocsUnknown
	cexception, cexceptionAllocMap := copyPJSValueRefBytes((*sliceHeader)(unsafe.Pointer(&exception)))
	__ret := C.JSObjectMakeTypedArrayWithArrayBuffer(cctx, carrayType, cbuffer, cexception)
	runtime.KeepAlive(cexceptionAllocMap)
	runtime.KeepAlive(cbufferAllocMap)
	runtime.KeepAlive(carrayTypeAllocMap)
	runtime.KeepAlive(cctxAllocMap)
	__v := *(*JSObjectRef)(unsafe.Pointer(&__ret))
	return __v
}

// JSObjectMakeTypedArrayWithArrayBufferAndOffset function as declared in JavaScriptCore/JSTypedArray.h:87
func JSObjectMakeTypedArrayWithArrayBufferAndOffset(ctx JSContextRef, arrayType JSTypedArrayType, buffer JSObjectRef, byteOffset uint64, length uint64, exception []JSValueRef) JSObjectRef {
	cctx, cctxAllocMap := *(*C.JSContextRef)(unsafe.Pointer(&ctx)), cgoAllocsUnknown
	carrayType, carrayTypeAllocMap := (C.JSTypedArrayType)(arrayType), cgoAllocsUnknown
	cbuffer, cbufferAllocMap := *(*C.JSObjectRef)(unsafe.Pointer(&buffer)), cgoAllocsUnknown
	cbyteOffset, cbyteOffsetAllocMap := (C.size_t)(byteOffset), cgoAllocsUnknown
	clength, clengthAllocMap := (C.size_t)(length), cgoAllocsUnknown
	cexception, cexceptionAllocMap := copyPJSValueRefBytes((*sliceHeader)(unsafe.Pointer(&exception)))
	__ret := C.JSObjectMakeTypedArrayWithArrayBufferAndOffset(cctx, carrayType, cbuffer, cbyteOffset, clength, cexception)
	runtime.KeepAlive(cexceptionAllocMap)
	runtime.KeepAlive(clengthAllocMap)
	runtime.KeepAlive(cbyteOffsetAllocMap)
	runtime.KeepAlive(cbufferAllocMap)
	runtime.KeepAlive(carrayTypeAllocMap)
	runtime.KeepAlive(cctxAllocMap)
	__v := *(*JSObjectRef)(unsafe.Pointer(&__ret))
	return __v
}

// JSObjectGetTypedArrayBytesPtr function as declared in JavaScriptCore/JSTypedArray.h:98
func JSObjectGetTypedArrayBytesPtr(ctx JSContextRef, object JSObjectRef, exception []JSValueRef) unsafe.Pointer {
	cctx, cctxAllocMap := *(*C.JSContextRef)(unsafe.Pointer(&ctx)), cgoAllocsUnknown
	cobject, cobjectAllocMap := *(*C.JSObjectRef)(unsafe.Pointer(&object)), cgoAllocsUnknown
	cexception, cexceptionAllocMap := copyPJSValueRefBytes((*sliceHeader)(unsafe.Pointer(&exception)))
	__ret := C.JSObjectGetTypedArrayBytesPtr(cctx, cobject, cexception)
	runtime.KeepAlive(cexceptionAllocMap)
	runtime.KeepAlive(cobjectAllocMap)
	runtime.KeepAlive(cctxAllocMap)
	__v := *(*unsafe.Pointer)(unsafe.Pointer(&__ret))
	return __v
}

// JSObjectGetTypedArrayLength function as declared in JavaScriptCore/JSTypedArray.h:108
func JSObjectGetTypedArrayLength(ctx JSContextRef, object JSObjectRef, exception []JSValueRef) uint64 {
	cctx, cctxAllocMap := *(*C.JSContextRef)(unsafe.Pointer(&ctx)), cgoAllocsUnknown
	cobject, cobjectAllocMap := *(*C.JSObjectRef)(unsafe.Pointer(&object)), cgoAllocsUnknown
	cexception, cexceptionAllocMap := copyPJSValueRefBytes((*sliceHeader)(unsafe.Pointer(&exception)))
	__ret := C.JSObjectGetTypedArrayLength(cctx, cobject, cexception)
	runtime.KeepAlive(cexceptionAllocMap)
	runtime.KeepAlive(cobjectAllocMap)
	runtime.KeepAlive(cctxAllocMap)
	__v := (uint64)(__ret)
	return __v
}

// JSObjectGetTypedArrayByteLength function as declared in JavaScriptCore/JSTypedArray.h:118
func JSObjectGetTypedArrayByteLength(ctx JSContextRef, object JSObjectRef, exception []JSValueRef) uint64 {
	cctx, cctxAllocMap := *(*C.JSContextRef)(unsafe.Pointer(&ctx)), cgoAllocsUnknown
	cobject, cobjectAllocMap := *(*C.JSObjectRef)(unsafe.Pointer(&object)), cgoAllocsUnknown
	cexception, cexceptionAllocMap := copyPJSValueRefBytes((*sliceHeader)(unsafe.Pointer(&exception)))
	__ret := C.JSObjectGetTypedArrayByteLength(cctx, cobject, cexception)
	runtime.KeepAlive(cexceptionAllocMap)
	runtime.KeepAlive(cobjectAllocMap)
	runtime.KeepAlive(cctxAllocMap)
	__v := (uint64)(__ret)
	return __v
}

// JSObjectGetTypedArrayByteOffset function as declared in JavaScriptCore/JSTypedArray.h:128
func JSObjectGetTypedArrayByteOffset(ctx JSContextRef, object JSObjectRef, exception []JSValueRef) uint64 {
	cctx, cctxAllocMap := *(*C.JSContextRef)(unsafe.Pointer(&ctx)), cgoAllocsUnknown
	cobject, cobjectAllocMap := *(*C.JSObjectRef)(unsafe.Pointer(&object)), cgoAllocsUnknown
	cexception, cexceptionAllocMap := copyPJSValueRefBytes((*sliceHeader)(unsafe.Pointer(&exception)))
	__ret := C.JSObjectGetTypedArrayByteOffset(cctx, cobject, cexception)
	runtime.KeepAlive(cexceptionAllocMap)
	runtime.KeepAlive(cobjectAllocMap)
	runtime.KeepAlive(cctxAllocMap)
	__v := (uint64)(__ret)
	return __v
}

// JSObjectGetTypedArrayBuffer function as declared in JavaScriptCore/JSTypedArray.h:138
func JSObjectGetTypedArrayBuffer(ctx JSContextRef, object JSObjectRef, exception []JSValueRef) JSObjectRef {
	cctx, cctxAllocMap := *(*C.JSContextRef)(unsafe.Pointer(&ctx)), cgoAllocsUnknown
	cobject, cobjectAllocMap := *(*C.JSObjectRef)(unsafe.Pointer(&object)), cgoAllocsUnknown
	cexception, cexceptionAllocMap := copyPJSValueRefBytes((*sliceHeader)(unsafe.Pointer(&exception)))
	__ret := C.JSObjectGetTypedArrayBuffer(cctx, cobject, cexception)
	runtime.KeepAlive(cexceptionAllocMap)
	runtime.KeepAlive(cobjectAllocMap)
	runtime.KeepAlive(cctxAllocMap)
	__v := *(*JSObjectRef)(unsafe.Pointer(&__ret))
	return __v
}

// JSObjectMakeArrayBufferWithBytesNoCopy function as declared in JavaScriptCore/JSTypedArray.h:154
func JSObjectMakeArrayBufferWithBytesNoCopy(ctx JSContextRef, bytes unsafe.Pointer, byteLength uint64, bytesDeallocator JSTypedArrayBytesDeallocator, deallocatorContext unsafe.Pointer, exception []JSValueRef) JSObjectRef {
	cctx, cctxAllocMap := *(*C.JSContextRef)(unsafe.Pointer(&ctx)), cgoAllocsUnknown
	cbytes, cbytesAllocMap := bytes, cgoAllocsUnknown
	cbyteLength, cbyteLengthAllocMap := (C.size_t)(byteLength), cgoAllocsUnknown
	cbytesDeallocator, cbytesDeallocatorAllocMap := bytesDeallocator.PassValue()
	cdeallocatorContext, cdeallocatorContextAllocMap := deallocatorContext, cgoAllocsUnknown
	cexception, cexceptionAllocMap := copyPJSValueRefBytes((*sliceHeader)(unsafe.Pointer(&exception)))
	__ret := C.JSObjectMakeArrayBufferWithBytesNoCopy(cctx, cbytes, cbyteLength, cbytesDeallocator, cdeallocatorContext, cexception)
	runtime.KeepAlive(cexceptionAllocMap)
	runtime.KeepAlive(cdeallocatorContextAllocMap)
	runtime.KeepAlive(cbytesDeallocatorAllocMap)
	runtime.KeepAlive(cbyteLengthAllocMap)
	runtime.KeepAlive(cbytesAllocMap)
	runtime.KeepAlive(cctxAllocMap)
	__v := *(*JSObjectRef)(unsafe.Pointer(&__ret))
	return __v
}

// JSObjectGetArrayBufferBytesPtr function as declared in JavaScriptCore/JSTypedArray.h:164
func JSObjectGetArrayBufferBytesPtr(ctx JSContextRef, object JSObjectRef, exception []JSValueRef) unsafe.Pointer {
	cctx, cctxAllocMap := *(*C.JSContextRef)(unsafe.Pointer(&ctx)), cgoAllocsUnknown
	cobject, cobjectAllocMap := *(*C.JSObjectRef)(unsafe.Pointer(&object)), cgoAllocsUnknown
	cexception, cexceptionAllocMap := copyPJSValueRefBytes((*sliceHeader)(unsafe.Pointer(&exception)))
	__ret := C.JSObjectGetArrayBufferBytesPtr(cctx, cobject, cexception)
	runtime.KeepAlive(cexceptionAllocMap)
	runtime.KeepAlive(cobjectAllocMap)
	runtime.KeepAlive(cctxAllocMap)
	__v := *(*unsafe.Pointer)(unsafe.Pointer(&__ret))
	return __v
}

// JSObjectGetArrayBufferByteLength function as declared in JavaScriptCore/JSTypedArray.h:174
func JSObjectGetArrayBufferByteLength(ctx JSContextRef, object JSObjectRef, exception []JSValueRef) uint64 {
	cctx, cctxAllocMap := *(*C.JSContextRef)(unsafe.Pointer(&ctx)), cgoAllocsUnknown
	cobject, cobjectAllocMap := *(*C.JSObjectRef)(unsafe.Pointer(&object)), cgoAllocsUnknown
	cexception, cexceptionAllocMap := copyPJSValueRefBytes((*sliceHeader)(unsafe.Pointer(&exception)))
	__ret := C.JSObjectGetArrayBufferByteLength(cctx, cobject, cexception)
	runtime.KeepAlive(cexceptionAllocMap)
	runtime.KeepAlive(cobjectAllocMap)
	runtime.KeepAlive(cctxAllocMap)
	__v := (uint64)(__ret)
	return __v
}
